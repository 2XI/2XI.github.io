<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shengxihu&#39;s Blog&#39;</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-10T11:45:10.790Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>2XI</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Macrotasks and microtasks in JavaScript</title>
    <link href="http://yoursite.com/2018/03/10/Macrotasks-and-microtasks-in-JavaScript/"/>
    <id>http://yoursite.com/2018/03/10/Macrotasks-and-microtasks-in-JavaScript/</id>
    <published>2018-03-10T05:00:56.000Z</published>
    <updated>2018-03-10T11:45:10.790Z</updated>
    
    <content type="html"><![CDATA[<p>昨天面试的时候第一次听说了JavaScript的macrotask和microtask，这两个概念涉及到JavaScript的异步运行机制，此前也对JavaScript的时间循环机制有些了解，在弄懂macrotask和microtask后，对JavaScript的异步运行机制有了更深入的理解。</p><h3 id="异步运行机制"><a href="#异步运行机制" class="headerlink" title="异步运行机制"></a>异步运行机制</h3><p>关于JavaScript的异步运行机制，参照<a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ" target="_blank" rel="noopener">Philip Roberts在JSConf上的演讲视频</a>，在视频中他对JavaScript的异步运行机制做了可视化讲解，最初在看到这个视频时简直被惊艳到（那时我还是一个小萌新），我们也可以在他写的可视化工具中运行自己的代码以分析JavaScript的运行机制。遗憾的是他不支持Promises，也未涉及到Macrotasks and microtasks，所以不足以让我们从中窥见Macrotasks and microtasks的奥秘。</p><p>从Philip Roberts的演讲中我们还是可以了解到：JavaScript主线程拥有一个执行栈以及一个回调队列，主线程会依次执行代码，当遇到函数时，会先将函数 入栈，函数运行完毕后再将该函数 出栈，直到所有代码执行完毕。当遇到 WebAPI（例如：setTimeout, AJAX）这些函数时，这些函数会立即返回一个值，从而让主线程不会在此处阻塞。而真正的异步操作会由浏览器执行，浏览器会在这些任务完成后，将事先定义的回调函数推入主线程的回调队列中。而主线程则会在 清空当前执行栈后，按照先入先出的顺序读取回调队列里面的任务。</p><p>所以当浏览器执行如下JavaScript代码时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;script start&apos;)</span><br><span class="line">setTimeout(function fn() &#123;</span><br><span class="line">    console.log(&apos;setTimeout&apos;)</span><br><span class="line">&#125;, 0);</span><br><span class="line">console.log(&apos;script end&apos;)</span><br></pre></td></tr></table></figure><p>执行顺序为：</p><p>首先<code>console.log(&#39;script start&#39;)</code>会被压入执行栈，执行后打印<code>script start</code>，然后出栈。接下来<code>setTimeout</code>会被压入执行栈，它会返回<code>fn</code>函数。遇到（setTimeout, AJAX）这类web api时，JavaScript引擎会将他们交给浏览器的异步执行队列来处理，计时器设定计时为零，但是<code>fn</code>函数会加入<code>task</code>队列。但执行栈中的JavaScript程序会继续执行，<code>console.log(&#39;script end&#39;)</code>函数会执行，并输出<code>script start</code>。当执行栈为空时<code>task</code>队列中的函数会被取出依次执行。</p><h3 id="macrotask-和-microtask"><a href="#macrotask-和-microtask" class="headerlink" title="macrotask 和 microtask"></a>macrotask 和 microtask</h3><p>先提出一个问题：当我们执行下面的代码时，预计输出顺序会是什么样的？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(function() &#123;</span><br><span class="line">    console.log(1)</span><br><span class="line">&#125;,0);</span><br><span class="line">new Promise(function(resolve) &#123;</span><br><span class="line">    resolve()</span><br><span class="line">    console.log(2)</span><br><span class="line">&#125;).then(function() &#123;</span><br><span class="line">    console.log(3)</span><br><span class="line">&#125;);</span><br><span class="line">console.log(4)</span><br></pre></td></tr></table></figure><p>如果我们不知道macrotask和microtask的相关概念和区别，我们的分析逻辑应该是这样的：</p><ol><li><p><code>setTimeout</code>进入执行栈，因为它是web API，JavaScript引擎会将它交给浏览器异步执行队列执行，异步执行队列在setTimeout完成计时后会将匿名回调函数推到回调队列。</p></li><li><p><code>new Promise</code>进入执行栈，将Promise的状态从fulfilled切换到resolve。然后把then里面的匿名回调函数推到回调队列中。然后执行<code>console.log(2)</code>。</p></li><li><p><code>console.log(4)</code>进入执行栈，打印出4。</p></li><li><p>接下来从回调队列中依次取出setTimeout和then的回调函数并执行，输出1、3。</p></li></ol><p>按照这样的分析，我们输出的顺序应该是：2、4、1、3。</p><p>然而当我们在浏览器中执行这段代码是，得到的结果却是：2、4、3、1。到底是哪一个环节出了问题呢？</p><p>要搞清楚这个问题，我们需要了解macrotasks和microtasks这两个概念：Macrotask 和 microtask 都是属于上述的异步任务中的一种，它们对应的API分别为：<br>macrotasks: <code>setTimeout, setInterval, setImmediate, I/O, UI rendering</code><br>microtasks: <code>process.nextTick, Promises, Object.observe(废弃), MutationObserver</code></p><p>其实本文开头提到的回调队列包含macrotasks队列和microtasks队列。浏览器在处理这两种异步任务队列时的表现为：在每一次事件循环中，macrotask只会提取一个执行，而 microtask 会一直提取，直到 microtasks 队列清空。一般情况下，macrotask队列我们会直接称为task queue，即任务队列。</p><p>也就是说macrotasks和microtasks的执行顺序是：</p><p>取task queue第一个task执行 -&gt; 取microtask全部任务依次执行 -&gt; 取task queue下一个任务执行 -&gt; 再次取出microtask全部任务执行 -&gt; … 循环往复</p><p>在浏览器环境的事件循环中， JavaScript 脚本也会作为一个 task 被推入任务队列，我们在运行这个事件后，该脚本中的macrotasks、microtasks才会被推入队列。</p><p>所以回顾我们的代码，执行顺序应该为：</p><ol><li><p>JavaScript 脚本也会作为一个 task 被推入任务队列。</p></li><li><p><code>setTimeout</code>进入执行栈，因为它是web API，JavaScript引擎会将它交给浏览器异步执行队列执行，异步执行队列在setTimeout完成计时后会将匿名回调函数推到macrotasks队列。</p></li><li><p><code>new Promise</code>进入执行栈，将Promise的状态从fulfilled切换到resolve。然后把then里面的匿名回调函数推到microtask队列中。然后执行<code>console.log(2)</code>。</p></li><li><p><code>console.log(4)</code>进入执行栈，打印出4。</p></li><li><p>第一轮任务队列已经执行完毕，符合microtask执行条件，因此会将microtask队列中的任务优先执行，接下来从microtask队列取出then的回调函数并执行，输出3。</p></li><li><p>开始执行第二轮，取task queue下一个任务执行，也就是<code>setTimeout</code>的匿名回调函数，执行后输出1.</p></li></ol><p>按照这样的分析，我们输出的顺序应该是：2、4、3、1。</p><p>到此，我们大致弄清楚了异步任务的执行机制，但是关于macrotask 和 microtask和异步任务执行机制跟深入的研究，并不应该在此终结，还需要更加深入的研究。</p><p>参考文献：</p><p>1.<a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ" target="_blank" rel="noopener">What is the heck is the event-loop anyway</a><br>2.<a href="http://tuobaye.com/2017/10/24/%E9%80%9A%E8%BF%87microtasks%E5%92%8Cmacrotasks%E7%9C%8BJavaScript%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/" target="_blank" rel="noopener">通过microtasks和macrotasks看JavaScript异步任务执行顺序</a><br>3.<a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" target="_blank" rel="noopener">Tasks, microtasks, queues and schedules</a><br>4.<a href="https://juejin.im/entry/58d4df3b5c497d0057eb99ff" target="_blank" rel="noopener">理解 JavaScript 中的 macrotask 和 microtask</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天面试的时候第一次听说了JavaScript的macrotask和microtask，这两个概念涉及到JavaScript的异步运行机制，此前也对JavaScript的时间循环机制有些了解，在弄懂macrotask和microtask后，对JavaScript的异步运行机
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>temporal dead zone</title>
    <link href="http://yoursite.com/2018/03/10/temporal-dead-zone/"/>
    <id>http://yoursite.com/2018/03/10/temporal-dead-zone/</id>
    <published>2018-03-10T03:48:57.000Z</published>
    <updated>2018-03-10T04:22:27.144Z</updated>
    
    <content type="html"><![CDATA[<p>昨天面试的时候被问到JavaScript中使用let和const声明符声明变量时会造成暂时性死区的问题，当时不知道暂时性死区是什么意思，事后谷歌了一下这个名词，发现所谓暂时性死区其实就是JavaScrip作用域机制和let与const没有变量提升造成的。想想所谓暂时性死区自己还是懂的，只是不知道叫暂时性死区这个概念。</p><h3 id="使用var声明变量"><a href="#使用var声明变量" class="headerlink" title="使用var声明变量"></a>使用var声明变量</h3><p>在es6定义let和const声明符之前，我们声明一个变量通常使用var：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = 1</span><br></pre></td></tr></table></figure></p><p>我们可以在变量被声明之前访问变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function fun() &#123;</span><br><span class="line">    console.log(a) //undefined</span><br><span class="line">    var a = 1</span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br></pre></td></tr></table></figure></p><p>我们可以在变量被声明之前给变量赋值或者访问该变量，当我们给变量赋值时，如果在当前作用域的赋值操作后面声明了该变量，赋值操作为正常进行。如果在当前作用域未声明改变量，在当前作用域的父级或祖级作用域也未声明该变量，那么JavaScript会帮我们在全局作用域使用var创建一个变量然后进行赋值。如果在当前作用域的父级或祖级作用域中声明了该变量，我们知道引擎会将变量赋值给父级或祖级作用域中的变量。</p><h3 id="使用let或const声明变量"><a href="#使用let或const声明变量" class="headerlink" title="使用let或const声明变量"></a>使用let或const声明变量</h3><p>es6新增了let和const声明符用来声明变量和常量，在本文中我只会讨论关于暂时性死区的问题。在es规范中，使用let和const声明变量是没有变量提升的，所以会出现以下情况：</p><p>在变量被声明之前访问变量或给变量赋值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function fun() &#123;</span><br><span class="line">    console.log(a) // ReferenceError: a is not defined</span><br><span class="line">    a = 2 //ReferenceError: a is not defined</span><br><span class="line">    let a = 1</span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br></pre></td></tr></table></figure></p><p>或者：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function fun() &#123;</span><br><span class="line">    console.log(a) // ReferenceError: a is not defined</span><br><span class="line">    a = 2 //ReferenceError: a is not defined</span><br><span class="line">    const a</span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br></pre></td></tr></table></figure></p><p>如果在变量被声明之后访问该变量，一切正常：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function fun() &#123;</span><br><span class="line">    const a</span><br><span class="line">    console.log(a) // undefined</span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br></pre></td></tr></table></figure></p><p>所谓暂时性死区就是指使用let或const在当前作用域声明变量时，如果在变量被声明之前访问该变量，会造成引用错误，因为此时变量没有被声明。本质是let和const没有变量提升，变量声明不会被提升到当前作用域的最前面，所以在变量声明之前访问不到。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天面试的时候被问到JavaScript中使用let和const声明符声明变量时会造成暂时性死区的问题，当时不知道暂时性死区是什么意思，事后谷歌了一下这个名词，发现所谓暂时性死区其实就是JavaScrip作用域机制和let与const没有变量提升造成的。想想所谓暂时性死区自
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>FED Interview</title>
    <link href="http://yoursite.com/2018/02/23/FED-Interview/"/>
    <id>http://yoursite.com/2018/02/23/FED-Interview/</id>
    <published>2018-02-23T05:53:44.000Z</published>
    <updated>2018-03-11T16:18:25.319Z</updated>
    
    <content type="html"><![CDATA[<ul><li>定位<br>  position的值：<br>  absolute, relative, fixed, static, sticky, inherit. </li></ul><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>absolute</td><td>生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位.</td></tr><tr><td>relative</td><td>生成相对定位的元素，相对于其正常位置进行定位。</td></tr><tr><td>fixed</td><td>生成绝对定位的元素，相对于浏览器窗口进行定位。</td></tr><tr><td>static</td><td>默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）.</td></tr><tr><td>sticky(css3草案)</td><td>盒位置根据正常流计算(这称为正常流动中的位置)，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。在所有情况下，该元素定位均不对后续元素造成影响。</td></tr></tbody></table><ul><li>跨域问题</li></ul><ol><li>jsonp</li></ol><p>原理：动态插入script标签，通过script标签指定URL，在URL参数中指定回调函数，服务器端收到请求后会执行我们在URL参数中指定的函数，并且会把我们需要的json数据作为参数传入回调函数。</p><ol><li>跨域资源共享 CORS</li></ol><p>原理：服务器设置Access-Control-Allow-OriginHTTP响应头之后，浏览器将会允许跨域请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: *              # 允许所有域名访问，或者</span><br><span class="line">Access-Control-Allow-Origin: http://a.com   # 只允许所有域名访问</span><br></pre></td></tr></table></figure><ol><li>设置 document.domain</li></ol><p>原理：相同主域名不同子域名下的页面，可以设置document.domain让它们同域</p><p>如：URL是<a href="http://a.com/foo的页面，它对http://b.a.com/bar的DOM访问要求后者将" target="_blank" rel="noopener">http://a.com/foo的页面，它对http://b.a.com/bar的DOM访问要求后者将</a> document.domain往上设置一级.</p><p>限制：<code>document.domain</code>只能从子域设置到主域，往下设置以及往其他域名设置都是不允许的.</p><ol><li>有src的标签</li></ol><p>原理：所有具有src或href属性的HTML标签都是可以跨域的，包括<code>&lt;img&gt;</code>, <code>&lt;script&gt;</code><br>限制：需要创建一个DOM对象，只能用于GET方法</p><ol><li>window.postMessage</li></ol><p>原理：HTML5允许窗口之间发送消息<br>限制：浏览器需要支持HTML5，获取窗口句柄后才能相互通信</p><p>JSONP要成功获取数据，需要跨域资源所在服务器的配合，资源所在服务器需要回调一个合适的函数。</p><p>跨域的标准方案还是要使用HTML5提供的CORS头字段以及window.postMessage， 可以支持POST, PUT等HTTP方法，从机制上解决跨域问题。 值得注意的是Access-Control-Allow-Origin头字段是资源所在服务器设置的， 访问控制的责任仍然是在提供资源的服务器一方，这和JSONP是一样的.</p><ul><li>XML和json的区别</li></ul><ol><li><p>数据体积<br>XML的数据体积比json大.</p></li><li><p>数据交互方面<br>json数据与javascript的交互更加方便，便于解析和处理.</p></li><li><p>数据描述方面<br>XML对数据的描述性更好.</p></li><li><p>传输速度方面<br>json的传输速度更快.</p></li></ol><ul><li>webpack</li></ul><p>webpack是一个模块打包工具，使用webpack可以管理模块依赖。当使用webpack处理应用程序时，它会递归的构建一个依赖关系图，其中包含应用程序需要的每一个模块，然后依据依赖关系将模块打包成一个或多个bundle。</p><p>webpack的几大特色：</p><ol><li><p>插件<br>webpack有丰富的插件，在应用开发中可以根据不同的资源，针对不同的需要安装配置插件，非常灵活。webpack的插件非常丰富，并且用户也可以编写自定义的插件。</p></li><li><p>性能</p></li><li><p>兼容性<br>webpack兼容AMD、CommonJs和ES6的语法风格。</p></li><li><p>优化<br>webpack支持代码分割、代码压缩、图片编码等多种优化方式，减小应用程序的体积。可实现按需加载，减少页面初始化时间，优化应用体验。</p></li></ol><p>5、开发<br>webpack支持SourceUrls和SourceMaps，方便调试，可以监控文件大小、打包情况，也可以通过插件搭建服务器实现自动刷新，对开发友好。</p><p>loader和plugin的主要区别：</p><p>loader 用于加载某些资源文件。 因为webpack 本身只能打包commonjs规范的js文件，对于其他资源例如 css，图片，或者其他的语法集，比如 jsx， coffee，是没有办法加载的。 这就需要对应的loader将资源转化，加载进来。loader是用于加载的，它作用于一个个文件上。</p><p>plugin 用于扩展webpack的功能。它直接作用于 webpack，扩展了它的功能。当然loader也时变相的扩展了 webpack ，但是它只专注于转化文件（transform）这一个领域。而plugin的功能更加的丰富，而不仅局限于资源的加载。</p><ul><li>TCP/IP</li></ul><p><a href="https://juejin.im/post/58e36d35b123db15eb748856" target="_blank" rel="noopener">https://juejin.im/post/58e36d35b123db15eb748856</a><br><a href="https://www.jianshu.com/p/f9c8e4f8c65c" target="_blank" rel="noopener">https://www.jianshu.com/p/f9c8e4f8c65c</a></p><ul><li>GET/POST</li></ul><ul><li>css3新增内容</li></ul><p>元素选择器：E[foo^=”bar”]，E[foo$=”bar”]，E[foo*=”bar”]，E:root，E:nth-child(n)，E:nth-last-child(n)，E:nth-of-type(n)，E:nth-last-of-type(n)，E:last-child，E:first-of-type，E:last-of-type，E:only-child，E:only-of-type，E:empty，E~F，E:not(s)，E:target</p><p>状态选择器：E:enabled，E:disabled，E:checked    </p><p>值和单位：em，ex，ch，rem，vh，vw，vmin，vmax</p><p>字体：@Font-face</p><p>文本属性：text-shadow，text-overflow，word-wrap，</p><p>盒模型：box-sizing，box-shadow，border-colors，boder-image，border-radius，outline，</p><p>动画：Transitions, Transforms，Animation</p><p>颜色和背景：hsl，hsla，rgba，background-size，background-origin，background-clip，background(为一个元素指定多个背景)，渐变效果（Gradient）</p><p>浮动和定位：sticky（草案）</p><p>其他布局：flex，column（多列）</p><p>其他：resize，opacity</p><ul><li>HTML5 新增属性</li></ul><p>结构标签：</p><p><code>&lt;!DOCTYPE html&gt;</code>HTML版本和文档类型声明。</p><p><code>section</code>独立区块内容，表示文档结构，也可以放在有章节、页眉、页脚的其他部分。</p><p><code>article</code>特殊独立区块，表示页面中的核心内容。</p><p><code>aside</code>标签内容之外与标签内容相关的辅助内容。</p><p><code>header</code>某个区块的头部信息/标题。</p><p><code>hgroup</code>标题元素进行分组。</p><p><code>footer</code>标签定义文档或节的页脚。</p><p><code>nav</code>定义导航链接的部分。</p><p><code>figure</code>定义独立的流内容（图像、图表、照片、代码等等）。</p><p>表单标签(属性)：</p><p><code>email</code>：必须输入邮件。</p><p><code>url</code>：必须输入url地址。</p><p><code>number</code>：必须输入数值。</p><p><code>range</code>：必须输入一定范围内的数值。</p><p><code>datetype</code>：日期选择器。</p><p><code>search</code>：搜索常规的文本域。</p><p><code>color</code>：颜色。</p><p>媒体标签：</p><p><code>video</code>：视频</p><p><code>audio</code>：音频</p><p><code>embed</code>：嵌入内容（包括各种媒体），Midi、Wav、AU、MP3、Flash、AIFF等。</p><p>其他功能标签：</p><p><code>mark</code>：标注（像荧光笔做笔记）</p><p><code>progress</code>：进度条。<progress max="最大进度条的值" value="当前进度条的值"></progress></p><p><code>time</code>：数据标签，给搜索引擎使用。发布日期<time datetime="2014-12-25T09:00">9：00</time>更新日期<time datetime="2015-01-23T04:00" pubdate="">4:00</time></p><p><code>ruby</code>和<code>rt</code>：对某一个字进行注释。<ruby><rt>注释内容</rt><rp>浏览器不支持时如何显示</rp></ruby></p><p><code>wbr</code>：软换行，页面宽度到需要换行时换行。</p><p><code>canvas</code>：使用JS代码做内容进行图像绘制。</p><p><code>command</code>：按钮。</p><p><code>deteils</code>：展开菜单。</p><p><code>dateilst</code>：文本域下拉提示。</p><p><code>keygen</code>:加密。</p><p><code>base</code>: 为页面上的所有链接规定默认地址或默认目标。</p><p>已有元素新增属性：</p><p><code>&lt;script&gt;</code>: <code>defer</code>表示脚本加载完毕后，只有当页面也加载完毕才执行（推迟执行）、<code>async</code>脚本相对于页面的其余部分异步地执行（当页面继续进行解析时，脚本将被执行）。</p><p><code>&lt;link&gt;</code>: <code>rel=&quot;icon&quot;</code></p><p><code>&lt;iframe&gt;</code>: <code>seamless</code>定义框架无边框，<code>sandbox</code>用来规定内嵌框架的安全级别，<code>srcdoc</code>显示级别比sandbox高。</p><p><code>manifest</code>: 定义页面需要用到的离线应用文件，一般放在<code>&lt;html&gt;</code>标签里。</p><p><code>&lt;meta&gt;</code>: <code>charset</code>定义页面的字符集。</p><p><code>&lt;link&gt;</code>: <code>sizes</code>设置图标尺寸。</p><p><code>&lt;a&gt;</code>: <code>media</code>用于规定目标 URL 是为特殊设备（比如 iPhone）、语音或打印媒介设计的、<code>hreflang</code>用于指定被链接文档的语言。</p><p><code>&lt;ol&gt;</code>: <code>reversed</code>定义序号是否倒叙、<code>start</code>定义序号的起始值。</p><p><code>&lt;style&gt;</code>: <code>scoped</code>为内嵌CSS样式的属性，定义该样式只局限于拥有该内嵌样式的元素，适用于单页开发.</p><p>全局属性(对任意标签都可以使用的):</p><p><code>data-</code>: 自定义属性名字。</p><p><code>hidden</code>: 隐藏。</p><p><code>spellcheck</code>: 语法纠正。</p><p><code>tabindex</code>: 规定元素的 tab 键控制次序(当tab键用于导航时)。</p><p><code>contenteditable</code>: 定义元素是否可编辑。</p><p><code>desginMode</code>: 在JavaScript里插入的window.document.designMode = ‘on’，整个页面都可以编辑。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;定位&lt;br&gt;  position的值：&lt;br&gt;  absolute, relative, fixed, static, sticky, inherit. &lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;描述&lt;/th
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>水平垂直居中</title>
    <link href="http://yoursite.com/2018/02/05/%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/"/>
    <id>http://yoursite.com/2018/02/05/水平垂直居中/</id>
    <published>2018-02-05T08:27:56.000Z</published>
    <updated>2018-02-05T13:57:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>水平垂直居中是前端CSS编码中很常见的需求，本文将总结几种不同的写法。</p><p>一、垂直居中</p><p>1.line-height</p><p>如果元素内容是单行文本元素，将父元素的高度和行高设为一样就能实现垂直居中效果：</p><iframe height="265" scrolling="no" title="eVZaRN" src="//codepen.io/no1024/embed/eVZaRN/?height=265&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/no1024/pen/eVZaRN/" target="_blank" rel="noopener">eVZaRN</a> by shengxihu (<a href="https://codepen.io/no1024" target="_blank" rel="noopener">@no1024</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><p>如果要居中元素是行内元素或者行内块级元素，居中方法为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.father_class &#123;</span><br><span class="line">    /* $height为父元素高度 */</span><br><span class="line">    height: $height;</span><br><span class="line">    line-height: $height;</span><br><span class="line">    font-size: 0;</span><br><span class="line">    /* 子元素样式 */</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">.child_class &#123;</span><br><span class="line">    /* 子元素样式 */</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>居中效果如下：</p><iframe height="265" scrolling="no" title="KQzLVE" src="//codepen.io/no1024/embed/KQzLVE/?height=265&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/no1024/pen/KQzLVE/" target="_blank" rel="noopener">KQzLVE</a> by shengxihu (<a href="https://codepen.io/no1024" target="_blank" rel="noopener">@no1024</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><p>2.absolute + 负margin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.father_class &#123;</span><br><span class="line">    /* $height_father为父元素高度 */</span><br><span class="line">    height: $height_father;</span><br><span class="line">    position: relative;</span><br><span class="line">    /* 子元素样式 */</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">.child_class &#123;</span><br><span class="line">    /* $height_child为子元素高度 */</span><br><span class="line">    height: $height_child;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    margin-top: -($height_child/2);</span><br><span class="line">    /* 子元素样式 */</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>position: absolute + margin: auto<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.father_class &#123;</span><br><span class="line">    /* $height_father为父元素高度 */</span><br><span class="line">    height: $height_father;</span><br><span class="line">    position: relative;</span><br><span class="line">    /* 子元素样式 */</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">.child_class &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    margin: auto;</span><br><span class="line">    /* 子元素样式 */</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>居中效果如下：</p><iframe height="265" scrolling="no" title="aqNgbL" src="//codepen.io/no1024/embed/aqNgbL/?height=265&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/no1024/pen/aqNgbL/" target="_blank" rel="noopener">aqNgbL</a> by shengxihu (<a href="https://codepen.io/no1024" target="_blank" rel="noopener">@no1024</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><p>4.absolute + calc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.father_class &#123;</span><br><span class="line">    /* $height_father为父元素高度 */</span><br><span class="line">    height: $height_father;</span><br><span class="line">    position: relative;</span><br><span class="line">    /* 子元素样式 */</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">.child_class &#123;</span><br><span class="line">    /* $height_child为父元素高度 */</span><br><span class="line">    height: $height_child;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: calc(50% -$height_child/2);</span><br><span class="line">    /* 子元素样式 */</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>居中效果如图：</p><iframe height="265" scrolling="no" title="mXPNdJ" src="//codepen.io/no1024/embed/mXPNdJ/?height=265&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/no1024/pen/mXPNdJ/" target="_blank" rel="noopener">mXPNdJ</a> by shengxihu (<a href="https://codepen.io/no1024" target="_blank" rel="noopener">@no1024</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><p>5.absolute + transform</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.father_class &#123;</span><br><span class="line">    /* $height_father为父元素高度 */</span><br><span class="line">    height: $height_father;</span><br><span class="line">    position: relative;</span><br><span class="line">    /* 子元素样式 */</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">.child_class &#123;</span><br><span class="line">    /* $height_child为父元素高度 */</span><br><span class="line">    height: $height_child;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    transform: translateY(-50%);</span><br><span class="line">    /* 子元素样式 */</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>居中效果如下：</p><iframe height="265" scrolling="no" title="RQaXaW" src="//codepen.io/no1024/embed/RQaXaW/?height=265&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/no1024/pen/RQaXaW/" target="_blank" rel="noopener">RQaXaW</a> by shengxihu (<a href="https://codepen.io/no1024" target="_blank" rel="noopener">@no1024</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><p>6.table + vertical-align:middle<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.father_class &#123;</span><br><span class="line">    display:table-cell; </span><br><span class="line">    vertical-align:middle;</span><br><span class="line">    /* 子元素样式 */</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>居中效果如下：</p><iframe height="265" scrolling="no" title="table-cell" src="//codepen.io/no1024/embed/LQZVjW/?height=265&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/no1024/pen/LQZVjW/" target="_blank" rel="noopener">table-cell</a> by shengxihu (<a href="https://codepen.io/no1024" target="_blank" rel="noopener">@no1024</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><p>7.css table</p><p>将要居中的元素包裹在完整的表结构中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td class=&quot;box&quot;&gt;</span><br><span class="line">                &lt;p class=&quot;content&quot;&gt;Hello World!!!&lt;/p&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><p>居中效果如下：</p><iframe height="265" scrolling="no" title="css table" src="//codepen.io/no1024/embed/XZKmVz/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/no1024/pen/XZKmVz/" target="_blank" rel="noopener">css table</a> by shengxihu (<a href="https://codepen.io/no1024" target="_blank" rel="noopener">@no1024</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe><p>8.flex</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.father_class &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    /* 子元素样式 */</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>居中效果如下:</p><iframe height="265" scrolling="no" title="flex" src="//codepen.io/no1024/embed/zRBrOJ/?height=265&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/no1024/pen/zRBrOJ/" target="_blank" rel="noopener">flex</a> by shengxihu (<a href="https://codepen.io/no1024" target="_blank" rel="noopener">@no1024</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.<br></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;水平垂直居中是前端CSS编码中很常见的需求，本文将总结几种不同的写法。&lt;/p&gt;
&lt;p&gt;一、垂直居中&lt;/p&gt;
&lt;p&gt;1.line-height&lt;/p&gt;
&lt;p&gt;如果元素内容是单行文本元素，将父元素的高度和行高设为一样就能实现垂直居中效果：&lt;/p&gt;
&lt;iframe height=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mobile-layout</title>
    <link href="http://yoursite.com/2018/02/01/mobile-layout/"/>
    <id>http://yoursite.com/2018/02/01/mobile-layout/</id>
    <published>2018-01-31T16:15:32.000Z</published>
    <updated>2018-03-02T07:21:00.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mobile-layout"><a href="#mobile-layout" class="headerlink" title="mobile-layout"></a>mobile-layout</h1><ol><li><a href="#布局方案">布局方案</a><ol><li><a href="#百分比布局">百分比布局</a></li><li><a href="#media-queries">media queries</a></li><li><a href="#flexbox布局">flexbox布局</a></li><li><a href="#rem布局">rem布局</a></li><li><a href="#rem适配进阶">rem适配进阶</a></li></ol></li><li><a href="#总结：">总结：</a></li></ol><p>说到移动端，不得不提适配问题，大大小小的移动设备不但让做Android和ios的难过，因为设备大小和浏览器的差异，现在也让前端开始头疼了，不过，遇到问题我们总归要去寻求解决的方案。</p><p>因为现如今市面上移动设备的分辨率大小不同，显然咱们常用的px单位在这个时候就有些不太灵光了，为此，我们需要找到一个合理的适配方案。</p><h2 id="布局方案"><a href="#布局方案" class="headerlink" title="布局方案"></a><a href="#布局方案" title="布局方案"></a>布局方案</h2><h3 id="百分比布局"><a href="#百分比布局" class="headerlink" title="百分比布局"></a><a href="#百分比布局" title="百分比布局"></a>百分比布局</h3><p>我们能够想到的最简单的方案就是百分比布局了。各级元素的宽度都设成百分比以实现在水平方向上适应各种屏幕宽度的显示效果，我们先来看一个demo。</p><p><a href="http://codepen.io/no1024/pen/mOPNvd" target="_blank" rel="noopener"><img src="http://res.cloudinary.com/da4uixfcu/image/upload/v1479347646/p4r6suuzcykfev1aiapx.gif" alt=""></a></p><p>我们看到通过宽度设置百分比我们很容易的让页面中的元素实现了宽度自适应，那么高度怎么办呢？通常在开发过程中我们需要实际设置高度的情况比较少，限定高度值也不是一种合理的实现。在实际开发过程中，我们一般让高度由文字或者图片（img标签的高度会随宽度的值自动调整）撑开，当然也有例外的情况，比如我们使用背景图片代替img标签时，就需要我们手动设置高度的值了，如果设置不合理，图片显示的宽高比就会发生改变，改变浏览器的大小，我们会看到demo中图片显示的效果：</p><p><a href="http://codepen.io/no1024/pen/ObNKbK" target="_blank" rel="noopener"><img src="http://res.cloudinary.com/da4uixfcu/image/upload/v1479345803/ajzdppvfeh9rzlokyhl1.gif" alt=""></a></p><p>这个时候我们要解决的问题可以抽象为如何保证<em>在页面缩放过程中元素的宽高比不变</em>，为此，我们想<em>让元素的宽高都基于一个基准值计算</em>，这样实现可以保证元素的宽高比例始终是一个固定值。刚好我们有这么一个属性可以使用：padding，我想一定不止我一个人被这个属性的值为百分比时的表现坑过，不同于我们常见的宽度和高度的计算方式，<em>padding值为百分比时其计算值始终是基于父元素宽度的</em>，比如有下面的CSS样式：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.class &#123;</span><br><span class="line"></span><br><span class="line">width: 200px;</span><br><span class="line"></span><br><span class="line">height: 100px;</span><br><span class="line"></span><br><span class="line">padding: 5%;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器渲染时采用的样式是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.class &#123;</span><br><span class="line"></span><br><span class="line">width: 200px;</span><br><span class="line"></span><br><span class="line">height: 100px;</span><br><span class="line"></span><br><span class="line">padding-top: 10px;</span><br><span class="line"></span><br><span class="line">padding-right: 10px;</span><br><span class="line"></span><br><span class="line">padding-bottom: 10px;</span><br><span class="line"></span><br><span class="line">padding-left: 10px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们要利用它来实现一种高度自适应的效果，我们如果将父元素的宽度设为百分比，然后再给元素设置height设为0，width和padding-top为百分比，元素的高度就会被padding撑起来，并且高度的计算值是以宽度为基准的，这完美的满足了我们的需求。</p><p><a href="http://codepen.io/no1024/pen/LbNKWW" target="_blank" rel="noopener"><img src="http://res.cloudinary.com/da4uixfcu/image/upload/v1479345933/j0nsodmh4rxwpx2vuiwq.gif" alt=""></a></p><p>然而对于不使用背景图又要求宽高比固定不变的元素，这似乎并没有什么鸟🐦用，我们都知道元素的padding里面是不能放置元素的（正常<a href="https://www.w3.org/TR/CSS2/visuren.html#normal-flow" target="_blank" rel="noopener">文档流</a>的情况下），这时我们想到一个属性：position:absolute,我们可以让子元素绝对定位，这样它就可以出现在父元素的padding位置了。我们来看demo：</p><p><a href="http://codepen.io/no1024/pen/bBeaGP" target="_blank" rel="noopener"><img src="http://res.cloudinary.com/da4uixfcu/image/upload/v1479345975/xufjbjweo5iuci6ikrid.gif" alt=""></a></p><p>绝对定位让元素脱离文档流，我们可以把它定位在父元素的padding里面，然后让它的宽度和高度都基于父元素的宽度调整，完美的实现了自适应。</p><p>下面我们来看一下有哪些网站是使用了百分比布局：</p><p><a href="http://m.toutiao.com/?W2atIF=1" target="_blank" rel="noopener">今日头条</a></p><p>对于单列元素宽度百分之百，高度由内容撑开。对于多列元素，元素宽度设百分比，元素大小随父元素宽度自动调整。</p><p><a href="http://m.jd.com/" target="_blank" rel="noopener">京东</a></p><p>直接将元素设为百分比，高度由内容撑开，图片只设置宽度，高度自动调整。</p><p><a href="https://chaoshi.m.tmall.com/" target="_blank" rel="noopener">天猫超市</a></p><p>天猫使用了百分比布局结合下文想要谈到的flex布局的方式，对于图片等一些需要保持宽高比例不变的元素，它采用padding-top加绝对定位的实现。</p><h3 id="media-queries"><a href="#media-queries" class="headerlink" title="media queries"></a><a href="#media-queries" title="media queries"></a>media queries</h3><p>在HTML4和CSS2中充许你使用“media”来指定特定的媒体类型，如屏幕（screen）和打印（print）等设备的样式表。CSS3中的Media Queries增加了更多的媒体查询，同时你可以对于特定的设备类型、屏幕尺寸检查媒体是否符合某些条件，如果媒体符合相应的条件，那么就会调用对应的样式表。这个属性成为一堆成为CSS3最被人看好的一个属性之一——你可以让一个网站同时适配移动端和pc端。</p><p>我们将要讨论的是media query在移动布局中的应用，移动布局如果使用media query来为不同屏幕尺寸下的元素设置不同的大小以让其自适应是不现实的，国内目前安卓的主流机型有480x800, 480x854, 540x960, 720x1280, 800x1280 这五种，非主流机型还包括：240x320, 320x480, 640x960 这三种。iOS主流机型主要为 320x480, 640x960, 640x1136, 1024x768, 2048x1536五种，这么多的屏幕使用media query来适配那开发的工作量是很大的。media query在移动布局中一般用来设置字体和其他需要定制的元素尺寸。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.className &#123;</span><br><span class="line"></span><br><span class="line">width: 200px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media screen and (max-width: 1024px)&#123;</span><br><span class="line"></span><br><span class="line">   .className &#123;</span><br><span class="line"></span><br><span class="line">     width: 400px;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@media only screen and (max-width: 320px) &#123; body&#123; font-size: 12px; &#125;&#125;</span><br><span class="line"></span><br><span class="line">@media only screen and (max-width: 480px) &#123; body&#123; font-size: 14px; &#125;&#125;</span><br><span class="line"></span><br><span class="line">@media only screen and (max-width: 640px) &#123; body&#123; font-size: 16px; &#125;&#125;</span><br><span class="line"></span><br><span class="line">@media only screen and (max-width: 1024px) &#123; body&#123; font-size: 18px; &#125;&#125;</span><br></pre></td></tr></table></figure><p>在移动布局中常用媒体查询来设置几个断点以调整字体的大小。</p><h3 id="flexbox布局"><a href="#flexbox布局" class="headerlink" title="flexbox布局"></a><a href="#flexbox布局" title="flexbox布局"></a>flexbox布局</h3><p>CSS3 弹性盒子(Flexible Box 或 Flexbox)提供了一种全新的布局方式，弹性盒子中的子元素可以在各个方向上进行布局，并且能以弹性尺寸来适应显示空间。在定义方面来说，弹性布局是指通过调整其内元素的宽高，从而在任何显示设备上实现对可用显示空间最佳填充的能力。弹性容器扩展其内元素来填充可用空间，或将其收缩来避免溢出。更多关于flexbox的知识可以查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes" target="_blank" rel="noopener">使用 CSS 弹性盒子</a>和<a href="http://www.w3cplus.com/css3/a-guide-to-flexbox-new.html" target="_blank" rel="noopener">一个完整的Flexbox指南</a>.</p><p>下面我们来看一个demo：</p><p><a href="http://codepen.io/no1024/pen/eBzVwo" target="_blank" rel="noopener"><img src="http://res.cloudinary.com/da4uixfcu/image/upload/v1479346020/dwtlu9u1nvqw4npy5fsy.gif" alt=""></a></p><p>调整浏览器窗口我们看到元素的宽度可以自适应，我们可以给子元素的设置不同的伸缩比例就可以控制元素水平方向所占空间的大小。但是使用这种方案元素的高度我们必须回到使用百分比设置或者由内容撑开的思路上去，遇到前面谈到的使用背景图片代替img标签造成无法使用高度撑开父元素时，这种方案不能解决这个问题。当然在不使用背景图片代替img标签或者元素高度可以由内容撑开的时候，flexbox布局还是很有用处的。</p><p>应用到了flex布局的网站有：</p><p><a href="https://www.tmall.com/" target="_blank" rel="noopener">天猫</a></p><p>我们看到天猫的首页使用flex使元素在水平方向上均匀排列，实现水平方向上的自适应布局，高度方面直接由子元素撑开。</p><h3 id="rem布局"><a href="#rem布局" class="headerlink" title="rem布局"></a><a href="#rem布局" title="rem布局"></a>rem布局</h3><p>提到单位大家首先会想到的是em，px，pt这类的词语，rem也是这样一个长度单位。对于rem来说它可以成为做移动端的响应式适配的利器。</p><p>我们来看下兼容性：</p><p><img src="http://res.cloudinary.com/da4uixfcu/image/upload/v1479347727/ssvs1orku8p5lmgokued.png" alt="rem兼容性"></p><p>我们看到所有主流浏览器都兼容了，可以放心大胆的使用。</p><p>rem进行屏幕适配</p><p>在讲rem屏幕适配之前，先来看一下什么是rem：</p><p>这个单位代表相对于根元素的 font-size 大小（例如 font-size 元素）。当用在 font-size 在根元素，它代表了它的初始值。</p><p>上面的解释来着mdn，也就是说rem是相对于根元素html计算的，如果根元素是12px，那么1rem的计算值就是12px,我们把整个页面中所有元素的长度单位都设置为rem，不同屏幕尺寸下调整根元素字体的大小句可以实现元素自适应了。当让对于字体和边框这样的属性，建议不使用rem，我们不希望在大屏幕中字体过大，当边框这样较小的值，如果再计算为rem，浏览器会去四舍五入的计算值，最终会对显示效果会有影响。</p><p>rem基准值计算</p><p>由于我们所写出的页面是要在不同的屏幕大小设备上运行的，所以我们在写样式的时候必须要先以一个确定的屏幕来作为参考，这个就由我们拿到的视觉稿来定假如我们拿到的视觉稿是以iphone6的屏幕为基准设计的iPhone6的屏幕大小是375px。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rem = (375 / 10)px</span><br></pre></td></tr></table></figure><p>我们一般讲设备的宽度除以10，为什么是10，我们想尽量取一个不大又不小的整数，当然你也可以去其他值或者选择不除，只要保证页面的元素尺寸相对于这个值转换就OK。<br>根元素字体大小设置为37.5以后，可以保证浏览器的显示效果和设计图相同，当我们换一种屏幕尺寸，我们只需要改变html的font-size值，页面中元素的尺寸就会随html的font-size值调整。</p><p>动态设置html的font-size</p><p>现在关键问题来了，我们该如何通过不同的屏幕去动态设置html的font-size呢，最简单的方式是利用javascript来动态设置。我们可以利用js动态算出当前屏幕所适配的font-size即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementsByTagName(&apos;html&apos;)\[0\].style.fontSize = window.innerWidth / 10 + &apos;px&apos;;</span><br></pre></td></tr></table></figure><p>我们可以通过设置不同的html基础值来达到在不同页面适配的目的，当然在使用js来设置时，需要绑定页面的resize事件来达到变化时更新html的font-size。</p><p><a href="http://codepen.io/no1024/pen/NbrYrB" target="_blank" rel="noopener"><img src="http://res.cloudinary.com/da4uixfcu/image/upload/v1479346167/sdwt1ujvqz7mryo6g6np.gif" alt=""></a></p><p>使用rem布局的网站：</p><p><a href="https://m.taobao.com/#index" target="_blank" rel="noopener">淘宝</a></p><p>淘宝首页中除字体以外的其他长度单位都使用了rem.</p><p><a href="http://3g.163.com/touch/all?nav=2&amp;version=v_standard" target="_blank" rel="noopener">手机网易网</a></p><p>手机网易网使用了百分比加rem的布局方式，页面中的字体大小也使用rem来实现。</p><h3 id="rem适配进阶"><a href="#rem适配进阶" class="headerlink" title="rem适配进阶"></a><a href="#rem适配进阶" title="rem适配进阶"></a>rem适配进阶</h3><p>高清显示屏下图片变模糊</p><p>乔帮主发布的“iPhone4”和”new iPad”以及“Macbook Pro”中使用的Retina(视网膜)技术让我们走进了视网膜的Web时代。所谓视网膜的高清屏，就是改变原来一个物理像素显示一个逻辑像素的方式，一个物理像素现在可以显示多个逻辑像素，市面上的高清屏有1.5倍屏、2倍屏、3倍屏之分，一个物理像素分别对应显示9/4、4、9个逻辑像素，在这种高清屏上，普通显示屏上显示的比较清晰的图片会变得模糊。原因：浏览器在渲染是会将图片尺寸渲染为逻辑像素，然后在放大到物理像素的大小。假设我没有一个100px*100px的图片，在普通屏幕上浏览器会正常渲染为100px*100px,然而在高清屏中会渲染为100px*100px的逻辑像素，这个时候在iPhone的2陪屏中对应的物理像素是50px*50px,然后浏览器会再将图片放大到100px*100px，矢量图在放大的过程中就会变得模糊。更多高清屏原理可以查看<a href="http://www.w3cplus.com/css/towards-retina-web.html" target="_blank" rel="noopener">走向视网膜（Retina）的Web时代</a></p><p>我们首先要知道设备像素比(device pixel ratio)dpr这个概念，dpr的计算方式为：屏幕的逻辑像素/物理像素。一般我们获取到的视觉稿大部分是iphone6的，所以我们看到的尺寸一般是双倍大小的。设计给的稿子双倍的原因是iphone6这种屏幕属于高清屏，也即是设备像素比(device pixel ratio)dpr比较大，所以显示的像素较为清晰。一般手机的dpr是1，iphone4，iphone5这种高清屏是2，iphone6s plus这种高清屏是3，可以通过js的window.devicePixelRatio获取到当前设备的dpr，拿到了dpr之后，我们就可以在viewport meta头里，取消让浏览器自动缩放页面，而自己去设置viewport的content例如（这里之所以要设置viewport是因为我们要实现border1px的效果，我给border设置了1px，在scale的影响下，高清屏中就会显示成0.5px的效果）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meta.setAttribute(&apos;content&apos;, &apos;initial-scale=&apos; + 1/dpr + &apos;, maximum-scale=&apos; + 1/dpr + &apos;, minimum-scale=&apos; + 1/dpr + &apos;, user-scalable=no&apos;);</span><br></pre></td></tr></table></figure><p>这样实现的原理是：当使用高清屏幕时，例如在2倍屏幕上，为了保证显示效果，我们可以在给元素设置尺寸是将其放大为两倍，使用2陪尺寸大小的图片，整个页面的显示效果就是设计图的两倍大小，然后再设置viewport使页面缩小为原来的1/2,这样页面就显示为高清效果了。</p><p>在iphone6下的例子：</p><p>我们使用动态设置viewport，在iphone6下，scale会被设置成1/2即0.5.对于高清屏，我们需要将尺寸</p><p>放大为dpr的倍数。</p><p>例如下面的这段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.selector &#123;</span><br><span class="line"></span><br><span class="line">    height: 32px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在一倍屏下这是没有问题的，但是如果是两倍屏幕，就应该设为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.selector &#123;</span><br><span class="line"></span><br><span class="line">    height: 64px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相应3倍屏幕就应该为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">selector &#123;</span><br><span class="line"></span><br><span class="line">    height: 96px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种适配是一件比较麻烦的事情，淘宝前端为我们提供了一个解决方案。<a href="https://github.com/amfe/article/issues/17" target="_blank" rel="noopener">使用Flexible实现手淘H5页面的终端适配</a>，它使用rem和viewport完美的解决了移动端元素大小自适应和高清屏幕的适配问题。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><a href="#总结：" title="总结："></a>总结：</h2><p>前面谈到的适配方案没有优劣之分，具体如何选用还是要看业务的需求。比如我们有一个像腾讯新闻这样的资讯展示型网站，使用百分比布局就可以实现。对于天猫、京东、淘宝这类展示型多图片网站，涉及到图片的宽高比例问题，使用百分比结合padding+绝对定位、或者百分比结合flex也是不错的选择，当然我觉得采用淘宝这样使用rem布局的方式会更加简单，如果要适配高清屏那么建议你使用它的适配工具<a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noopener">lib-flexible</a>可以简单快速的满足业务需求。我们在实际开发过程中也会面临各种各样的业务场景，具体选用还要根据是否多图片、是否适配高清屏等业务要求来搭配布局方式作出最好的选择。</p><p><a href="/tags/Wireless-front-end/">Wireless-front-end</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mobile-layout&quot;&gt;&lt;a href=&quot;#mobile-layout&quot; class=&quot;headerlink&quot; title=&quot;mobile-layout&quot;&gt;&lt;/a&gt;mobile-layout&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#布局方案&quot;&gt;布局方案
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>How CSS pseudo-classes work, explained with code and lots of diagrams</title>
    <link href="http://yoursite.com/2018/02/01/How-CSS-pseudo-classes-work-explained-with-code-and-lots-of-diagrams/"/>
    <id>http://yoursite.com/2018/02/01/How-CSS-pseudo-classes-work-explained-with-code-and-lots-of-diagrams/</id>
    <published>2018-01-31T16:14:08.000Z</published>
    <updated>2018-03-02T07:12:50.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="How-CSS-pseudo-classes-work-explained-with-code-and-lots-of-diagrams"><a href="#How-CSS-pseudo-classes-work-explained-with-code-and-lots-of-diagrams" class="headerlink" title="How CSS pseudo-classes work, explained with code and lots of diagrams"></a>How CSS pseudo-classes work, explained with code and lots of diagrams</h1><ol><li><a href="#HTML和DOM树">HTML和DOM树</a></li></ol><p>原文：<a href="https://medium.freecodecamp.com/explained-css-pseudo-classes-cef3c3177361#.s76ufr89z" target="_blank" rel="noopener">How CSS pseudo-classes work, explained with code and lots of diagrams</a></p><p>老实说，有时候CSS真的很让人伤脑筋，比如在一个父元素中居中一个元素就很困难。</p><p>今天我们来了解一个更具有挑战性的CSS特性：伪类。</p><p>我这里要讨论的伪类涉及以下两种类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*-of-type selectors</span><br><span class="line"></span><br><span class="line">*-child selectors</span><br></pre></td></tr></table></figure></p><p>你或许在想，“我要学习伪类，为什么你却在谈论选择器？”。好吧，它们基本上是同一个概念，我也将会互换着使用这它们。</p><p>伪类有时候很难理解，主要是因为它们是以一种抽象的方式来描述的。我将使用·一种不同的表述方式，并且通过构造一棵DOM树来帮助你理解。</p><h3 id="HTML和DOM树"><a href="#HTML和DOM树" class="headerlink" title="HTML和DOM树"></a><a href="#HTML和DOM树" title="HTML和DOM树"></a>HTML和DOM树</h3><p>我们首先来看一下HTML代码块，我将在所有的例子中使用这些代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div class=”main”&gt;</span><br><span class="line"></span><br><span class="line">     &lt;a href=”#”&gt;Inner Link 1&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">     &lt;a href=”#”&gt;Inner Link 2&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">     &lt;ul&gt;</span><br><span class="line"></span><br><span class="line">       &lt;a href=”#”&gt;Inner Inner Link 1&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">       &lt;li&gt;</span><br><span class="line"></span><br><span class="line">         &lt;a href=”#”&gt;List Item 1&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">       &lt;/li&gt;</span><br><span class="line"></span><br><span class="line">       &lt;li&gt;</span><br><span class="line"></span><br><span class="line">         &lt;a href=”#”&gt;List Item 2&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">       &lt;/li&gt;</span><br><span class="line"></span><br><span class="line">     &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">     &lt;a href=”#”&gt;Inner Link 3&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;a href=”#”&gt;Outer Link 1&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;a href=”#”&gt;Outer Link 2&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>现在我将把这些代码转换成更直观更符合视觉的东西——一棵DOM树。</p><p>下面的body元素有三个子元素，.main和两个锚点元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div class=”main”&gt;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;a href=”#”&gt;Outer Link 1&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">  &lt;a href=”#”&gt;Outer Link 2&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>下面是以一棵DOM树的形式展示时body和它的三个子元素的关系示意图：</p><p><img src="https://cdn-images-1.medium.com/max/800/1*0J4m0pNfNUUe-JE9dPIbHw.png" alt="fig-1"></p><p>你需要记住的一点是子元素在DOM树中被放置的位置很重要，在代码中从上至下排列的子元素在DOM树中被从左至右放置。我们来看类名为.main的div元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=”main”&gt;</span><br><span class="line"></span><br><span class="line">   &lt;a href=”#”&gt;Inner Link 1&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">   &lt;a href=”#”&gt;Inner Link 2&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">   &lt;ul&gt;</span><br><span class="line"></span><br><span class="line">     ...</span><br><span class="line"></span><br><span class="line">   &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">   &lt;a href=”#”&gt;Inner Link 3&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>.main有4个子元素，前两个是锚点元素，接下来是一个ul元素，然后又是一个锚点元素。</p><p><img src="https://cdn-images-1.medium.com/max/800/1*b1bt8tsEPJ7L1jJNkSB1WQ.png" alt="fig-2"></p><p>同样，我们逐级画出每一层的DOM树。</p><p><img src="https://cdn-images-1.medium.com/max/800/1*xn3NJH7ajQ0t-nSQWkr2HA.png" alt="fig-3"></p><p>为了使这篇文章对你有所帮助，理解这棵DOM树很重要。</p><p>下面我们来看第一个伪类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pseudo-class #1 :only-of-type</span><br></pre></td></tr></table></figure><p>所有的伪类都遵循同样的范式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">what-you-want-to-select:filter &#123; /* styles */ &#125;</span><br></pre></td></tr></table></figure><p>what-you-want-to-select可以被用来选择任何以集合形式存在于DOM中的元素，下面让我来展示一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a:only-of-type &#123; </span><br><span class="line"></span><br><span class="line">  border: 2px solid black;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码块中，what-you-want-to-select是锚点元素（a标签），过滤器是only-of-type我们稍后会看到这个选择器做了什么。</p><p>首先，不用感谢我，如果你闲麻烦不想建测试项目的话，我在codepen中为你创建了一个。</p><p>你可以打开链接，查看这些变化，当你感到迷惑的时候再回头看这篇文章的解释，做好你的部分，我来完成我该做的。</p><p>下面我将完成的的那一部分，解释上面展示的代码。我们将从选中代码中所有的元素开始，然后把这些元素一个个过滤掉。</p><p><img src="https://cdn-images-1.medium.com/max/800/1*uBjIeeXnjBgkB2GApFiiGQ.png" alt="fig-4"></p><p>注意到选择是如何进行的了吗？DOM树中的每一部分（标记为1-5）都有共同的父元素. 第一部分的父元素是body，第二部分是.main,以此类推。注意每一部分的子元素在嵌套中都对应着相同的层级。</p><p>接下来，因为锚点元素是what-you-want-to-select，我们将会这样做：</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*bxFbXy1QDeGf-84KSJNxDg.png" alt="fig-5"></p><p>我已经在每部分中选出所有的锚点元素并且从左到右依次编号，我已经说过，从左到右很重要。</p><p>到此what-you-want-to-select这部分结束，下面进入过滤部分。</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*WwCVWx4UKJ5bdPUV1e4vXQ.png" alt="fig-6"></p><p>only-of类依次查询每一部分，挑选出有且仅有一个锚点元素的部分中的锚点元素。注意到3, 4, 5部分中分别只有一个锚点元素了吗？上图所示就是这个选择器作用的结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pseudo-class #2 :first-of-type</span><br></pre></td></tr></table></figure><p>让我们回到我们选出所有“what-you-want-to-select”的地方（在我们的例子中是锚点元素）。</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*bxFbXy1QDeGf-84KSJNxDg.png" alt="fig-7"></p><p>过滤器first-of-type转化为在每一部分中挑选第一个出现的锚点元素。</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*PJExtAelKm7-Xdt31Dw6cA.png" alt="fig-8"></p><p>下面是完成部分工作的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a:first-of-type &#123; </span><br><span class="line"></span><br><span class="line">  border: 2px solid black;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以防你忘了我不辞辛劳为你在CodePen中创建的项目，这里再次给出查看代码效果的链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pseudo-class #3 :last-of-type</span><br></pre></td></tr></table></figure><p>如果你不能通过名称来区分，last-of-type刚好与first-of-type作用效果相反。这也就意味着它会选出DOM树每一部分中的最后一个锚点元素。</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*dWlzrEMXkZueTDY52sGLzg.png" alt="fig-9"></p><p>“What about the sections with just one anchor element?”, not very glad you asked that question. It’s quite simple to see if a section has just one anchor element, it obviously passes the only-of-type filter, but not only that. Since there are no anchor elements preceding or following that particular tag it passes both first-of-type and last-of-type filters as well (e.g a tags Section 4 and 5).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pseudo-class #4 :nth-of-type(number/an + b/even/odd)</span><br></pre></td></tr></table></figure><p>And now we finally bite into the juicy part of the article, there’s simple CSS with some fifth grade Math toppings, hope you enjoy savouring it.<br>Let’s declare the following style to begin with.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a:nth-of-type(1) &#123;</span><br><span class="line"></span><br><span class="line">border: 2px solid black;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It looks a little cryptic but is quite simple really. To read the selector simply take the number from the parentheses and replace nth in the selector name with that number’s ordinal form. That’s another fancy English word for you, to be honest though…</p><p>Alright coming back, a:nth-of-type(1) can be therefore read as a:first-of-type and no surprise it works exactly like a:first-of-type and results in the elements getting selected as shown below; just the anchor elements which are first of their types in their respective section.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*PJExtAelKm7-Xdt31Dw6cA.png" alt="fig-10"></p><p>Well that is fine and dandy, but let’s try something different here.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a:nth-of-type(0) &#123;</span><br><span class="line"></span><br><span class="line">border: 2px solid black;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you guessed it right, which I am sure you didn’t, no anchor elements get selected in this case. As the numbering of types (and children as we’ll see) in each section starts from 1 and not 0, there is no “0” anchor elements in any of the sections and therefore a:zeroth-of-type selects nothing. And so will be the case for a:nth-of-type(5) or a:nth-of-type(6/7/8) because there are no a:fifth-of-type or a:sixth/seventh/eighth-of-type in any of the sections.<br>But if we went ahead and used…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a:nth-of-type(2) &#123; </span><br><span class="line"></span><br><span class="line">  border: 2px solid black;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>quite clearly sections 1 and 2 have a second-of-type anchor elements and hence those are the ones that get selected.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*o7aTc-EJF53N7bAHs2Ssxg.png" alt="fig-11"></p><p>Similarly, just to reinforce the point here, if we went ahead and declared the following style,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a:nth-of-type(3) &#123; </span><br><span class="line"></span><br><span class="line">  border: 2px solid black;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>it will select the third anchor elements in the second section as section 2is the only section with a :third-of-type anchor element.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*Ob0gZ_tJhflq73RCzbyFkw.png" alt="fig-12"></p><p>Quite simple isn’t it? But numbers aren’t the only thing that you can pass into :nth-of-type(…), this bloke is more powerful that that, you can also pass in formulas of form (a*n) + b (or for brevity an + b). Where a and b are constants and n is a value &gt;= 0. How did you like the Math topping sir? don’t worry it’ll all make sense in a second.</p><p>Consider the following style</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:nth-of-type(n) &#123;  border: 2px solid black; &#125;</span><br></pre></td></tr></table></figure><p>The formula that’s passed in the selector above is (1 * n) + 0 [= n] , a is 1, b is 0 and n is well, n. What happens next is, starting from 0 the numerical value of n is incrementally plugged into the formula and selection is made. Therefore a:nth-of-type(n) basically translates to</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a:nth-of-type(0) &#123;  border: 2px solid black; &#125; // n = 0</span><br><span class="line"></span><br><span class="line">a:nth-of-type(1) &#123;  border: 2px solid black; &#125; // n = 1</span><br><span class="line"></span><br><span class="line">a:nth-of-type(2) &#123;  border: 2px solid black; &#125; // n = 2</span><br><span class="line"></span><br><span class="line">a:nth-of-type(3) &#123;  border: 2px solid black; &#125; // n = 3</span><br><span class="line"></span><br><span class="line">a:nth-of-type(4) &#123;  border: 2px solid black; &#125; // n = 4</span><br></pre></td></tr></table></figure><p>Hence this results in all the anchor elements getting selected.</p><p>Let’s consider one more example</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:nth-of-type(2n + 1) &#123;  border: 2px solid black; &#125;</span><br></pre></td></tr></table></figure><p>Starting from 0 and incrementally plugging values of n in the formula generates the following selectors.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// n = 0 implies (2 * 0) + 1 = 1</span><br><span class="line"></span><br><span class="line">a:nth-of-type(1) &#123; border: 2px solid black; &#125;</span><br><span class="line"></span><br><span class="line">// n = 1 implies (2 * 1) + 1 = 3</span><br><span class="line"></span><br><span class="line">a:nth-of-type(3) &#123; border: 2px solid black; &#125;</span><br><span class="line"></span><br><span class="line">// n = 2 implies (2 * 2) + 1 = 5 - No selections since no fifth-of-type present in any of the sections</span><br><span class="line"></span><br><span class="line">a:nth-of-type(5) &#123; border: 2px solid black; &#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn-images-1.medium.com/max/1600/1*QrQj3hZlegF3D-kv7yB0gA.png" alt="fig-13"></p><p>Other than numbers and formulas that generate numbers, you can pass in either even or odd strings. even selects all the even occurrences of an element of particular type in a section i.e :second-of-type :fourth-of-type :sixth-of-type e.t.c and on the other hand obviously :nth-of-type(odd) selects all the odd occurrences i.e :first-of-type, :third-of-type, :fifth-of-type e.t.c</p><p>Pseudo-class #5 :nth-last-of-type(number/an + b/even/odd)</p><p>This selector functions exactly like the previous one, but with one little difference. See for yourself…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:nth-last-of-type(1) &#123;  border: 2px solid black; &#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn-images-1.medium.com/max/1600/1*8iEbmV82IuBJ7jyYiyx_AA.png" alt="fig-14"></p><p>Notice how in each level numbering of anchor types is done from right to left instead of normal left to right. That is the only difference. last-of-type accepts numbers and formulas and even/odd just like nth-of-type except when selection is made the last type is treated as first, second last as second, third last as third and so on…</p><p>With that we come to an end of *-of-type selectors. Hope it was a fun ride for you, we started with only-of-type then moved to first-of-type, last-of-type and took a huge dip into nth-of-type(…) and nth-last-of-type(..). If in case somewhere in the middle you lost your grip and fell off I encourage you play around with this pen and re read the explanation.</p><p>Alright, time to hop on to the next one in this less visited corner of the CSS theme park. Another category of pseudo selectors/classes we’re going to delve into are -child classes. With a clear understanding of how -of-type selectors work grasping the concept behind -child selectors should be a cinch for you. “Cinch? What’s that? Is it a unit of measurement?” No ya dumbass, it means an extremely easy task. Anyways, let’s start with our very first -child selector, :only-child.</p><p>Child pseudo-class #1 :only-child</p><p>Consider the following style.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a:only-child &#123; </span><br><span class="line"></span><br><span class="line">  border: 2px solid black;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now that’s the very definition of self explanatory and straightforward. The selector says to select all the anchor elements, given that the anchor element should be the only child of its parent, or, to put in other words select all the anchor elements whose parent has just one child and that one child is an anchor element.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*bNZeHcGUOqswsJDMQFszzw.png" alt="fig-15"></p><p>I had a friend who was never his mother’s favorite, and he was an only child. Just wanted to plug that in there, anyways, notice that in contrast with *-of-type selectors we are no longer numbering types, but children, starting of course from 1 (and not 0). When compared with only-of-type, the anchor element in section 3 is not selected as its parent (ul) has 3 children therefore even though it (the anchor element in level 3) is an only child of type ‘a’ of its parent, its not the only child, there are 2 lis as well.</p><p>Child pseudo-class #2 :first-child<br>Consider the following style declaration.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a:first-child &#123; </span><br><span class="line"></span><br><span class="line">  border: 2px solid black;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It simply says, select all the anchor element, but with one condition in mind, the anchor element should be the first child of its parent. That’s it, no further explanation needed.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*qLx7ELzLcCUWHY9xakrsfg.png" alt="fig-16"></p><p>For if you are a little confused as of why the a in section 1 wasn’t selected it’s because the first child in section 1 (whose parent is body) is .main, the first a in section 1 is the second child and couldn’t pass the first-child filter, that is the exact reason why the poor bloke ended up not being selected and was given a big hashtag fuck off. Let’s continue to the next one.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Child pseudo-class #3 :last-child</span><br></pre></td></tr></table></figure><p>This is the part where selectors should start to get self explanatory and you should start thinking I am dumb trying to explain them to you. But my name is not blurryface and I don’t care what you think. “Nice twenty one pilots reference there” yeah I know, thanks. Now, look at the following style declaration.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a:last-child &#123; </span><br><span class="line"></span><br><span class="line">  border: 2px solid black;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>what-you-want-to-select ? “Anchor elements.” And the filter you want to use? last-child. That quite simply translates to select those anchor elements which are the last child of their parent. Or, in other words select anchor elements whose parent finally decided it wasn’t fun anymore and stopped after that bloke was born. Below is what the tree looks like with :last-child selections.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*PfU4UZ2kZvgWZlG-Pav05w.png" alt="fig-17"></p><p>Child pseudo-class #4 :nth-child(number/an+b/even/odd)<br>I hope you were able to digest the Math topping you got served last time, because it’s about to happen again only this time on a slightly different crust.<br>Now, I would like you to take all your attention and laser point it to the following example.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:nth-child(1) &#123;  border: 2px solid black; &#125;</span><br></pre></td></tr></table></figure><p>It’s all the same as :nth-of-type, I would have linked to that section of the article here but Medium policies don’t allow that, if you want a refresher, you will have to scroll up to that section. Leaving Medium policies aside which might change in future, what hasn’t changed is the process of decrypting nth-selectors .<br>Just like with :nth-of-type, in the selector name take the number in parentheses and replace “nth” with that number’s ordinal form. Therefore the selector shown in example is equivalent to a:first-child and works exactly the same; i.e selects all the anchor elements, given that they are the first child of their parent.<br>That should nail the similarity between the two nth-selectors (nth-of-type and nth-child), but we will anyways go ahead and take a look at another example.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a:nth-child(2n - 1) &#123;  border: 2px solid black; &#125;</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">We begin by incrementally plugging in values of n starting from 0 into the formula, which makes us realize that the selector shown above is basically equivalent to the ones shown below.</span><br></pre></td></tr></table></figure><p>// n = 0 implies (2 0) - 1 = 0 - 1 = -1</p><p>a:nth-child(-1) { border: 2px solid black; } | No selections</p><p>// n = 1 implies (2 1) - 1 = 2 - 1 = 1</p><p>a:nth-child(1) { border: 2px solid black; }</p><p>// n = 2 implies (2 2) - 1 = 4 - 1 = 3</p><p>a:nth-child(3) { border: 2px solid black; }</p><p>// n = 3 implies (2 3) - 1 = 6 - 1 = 5</p><p>a:nth-child(5) { border: 2px solid black; } | No selections further<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">As it is, if the selector gets numbers out of bounds (like -1, 5, 6… in the case above) fed into it, it just ignores them. Following is how the tree looks with a:nth-child(2n-1) applied.</span><br><span class="line"></span><br><span class="line">![fig-18](https://cdn-images-1.medium.com/max/1600/1*aXGTeApzv5e1c7CJdk-pvg.png)</span><br><span class="line"></span><br><span class="line">Folks at CSS Tricks have a very informative article called Useful :nth-child Recipes you should check it out and put your knowledge of :nth-child to test. I challenge you m8.  </span><br><span class="line">With that we will move to the last selector of this article which punningly is :nth-last-child. Holy shit! why is “punningly” a word even?  </span><br><span class="line">Child pseudo-class #5 :nth-last-child(number/an + b/even/odd)  </span><br><span class="line">This selector works exactly like :nth-child except that it starts selecting elements from the opposite direction just like that annoying high school teacher who would ask questions to the class starting from the peaceful folks seated at the last benches. God I hated him. If you look at the trees drawn so far, the children are numbered left to right in each section, but this selector bloke sees the tree like so  </span><br><span class="line">![fig-19](https://cdn-images-1.medium.com/max/1600/1*2ChjMydCcmDb9TgFrY4htg.png)  </span><br><span class="line">The children in each section are numbered right to left. So if we go ahead and apply the following style</span><br></pre></td></tr></table></figure></p><p>a:nth-last-child(1) { border: 2px solid black; }<br>```</p><p>the anchor elements will get selected as shown below.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*XBmBun1e7jY0aaHsBlZHlg.png" alt="fig-20"></p><p>Quite straightforward isn’t it? This selector also very comfortably accepts formulas (of form an + b) and even/odd strings, the selections though, are made from the opposite end.<br>OK, this is where our journey together ends. You can pay for your ticket by tweeting this article to your developer buddies.<br>I hope you enjoyed reading this and learned something new, including some shiny new English words.<br>This is Nash signing off. I’ll see you in the next article. Follow me on Twitter to keep in touch. I tweet about dev-related stuff. A lot.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;How-CSS-pseudo-classes-work-explained-with-code-and-lots-of-diagrams&quot;&gt;&lt;a href=&quot;#How-CSS-pseudo-classes-work-explained-with-code-and-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>What&#39;s the difference between a JavaScript framework and a library</title>
    <link href="http://yoursite.com/2018/02/01/What-s-the-difference-between-a-JavaScript-framework-and-a-library/"/>
    <id>http://yoursite.com/2018/02/01/What-s-the-difference-between-a-JavaScript-framework-and-a-library/</id>
    <published>2018-01-31T16:12:18.000Z</published>
    <updated>2018-03-02T09:59:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What’s-the-difference-between-a-JavaScript-framework-and-a-library"><a href="#What’s-the-difference-between-a-JavaScript-framework-and-a-library" class="headerlink" title="What’s the difference between a JavaScript framework and a library"></a>What’s the difference between a JavaScript framework and a library</h1><ol><li><a href="#Javascript-library">Javascript library</a></li><li><a href="#Toolkit">Toolkit</a></li><li><a href="#Javascript-framework">Javascript framework</a></li><li><a href="#Difference">Difference</a></li></ol><h3 id="Javascript-library"><a href="#Javascript-library" class="headerlink" title="Javascript library"></a><a href="#Javascript-library" title="Javascript library"></a>Javascript library</h3><p>库的的概念和意义是用来提供一些方法的集合，避免重复定义相同功能的函数并具有一定的模式兼容性。库通常缺乏任何目的或意图的,并且旨在使用和集成客户端代码，协助客户端代码执行它的任务，常见的工具包如JQuery。</p><h3 id="Toolkit"><a href="#Toolkit" class="headerlink" title="Toolkit"></a><a href="#Toolkit" title="Toolkit"></a>Toolkit</h3><p>工具是一个有着特定目的的库，我的理解是它一般用来解决开发中的部分问题，或者说它提供了一个完整应用的单独的解决方案，比如说事件传递、控制流程或者网络通信等中的一个，常见的工具包如superagent。</p><h3 id="Javascript-framework"><a href="#Javascript-framework" class="headerlink" title="Javascript framework"></a><a href="#Javascript-framework" title="Javascript framework"></a>Javascript framework</h3><p>Javascript framework可以用来组织大型应用，提供几乎完整的解决方案。对于大型前端框架来说需要提供这些解决方案：</p><ul><li><p>数据层的抽象</p></li><li><p>视图的抽象</p></li><li><p>事件传递和控制流程</p></li><li><p>网络通信</p></li><li><p>路由管理</p></li></ul><h3 id="Difference"><a href="#Difference" class="headerlink" title="Difference"></a><a href="#Difference" title="Difference"></a>Difference</h3><p>Javascript framework 和 Javascript library的区别再于：inversion of control，也就是：</p><p>your code calls a library but a framework calls your code.</p><p>意思是：</p><ul><li><p>当你在调用library的时候， 你按照自己的意愿来control他（比如jQuery）。</p></li><li><p>对于framework， 那么control就是倒转过来了，是他在调用你（比如Vue), 就像是Hollywood的一个principle: Don’t call Us, We’ll call You.</p></li></ul><p>在使用framework的时候，自定义代码仅仅关注处理事件本身，由event loop 和 dispatch的events/messages机制来进行事件调用，它们是由framework或者运行时环境提供的。</p><p>Inversion of Control是一个framework和一个library的根本区别，library从本质上来讲是一组你可以调用的函数，这些通常组织成类，每次调用做些处理然后将控制权返还给客户端。一个框架包含了一些抽象的设计，内置更多的钩子，为了使用这些钩子，你需你需要通过将框架子类化或者在这些地方插入自己的类。然后框架会在这些地方调用你的自定义代码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;What’s-the-difference-between-a-JavaScript-framework-and-a-library&quot;&gt;&lt;a href=&quot;#What’s-the-difference-between-a-JavaScript-framework-a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Just For Fun</title>
    <link href="http://yoursite.com/2018/02/01/Just-For-Fun/"/>
    <id>http://yoursite.com/2018/02/01/Just-For-Fun/</id>
    <published>2018-01-31T16:11:09.000Z</published>
    <updated>2018-01-31T16:11:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Just-For-Fun"><a href="#Just-For-Fun" class="headerlink" title="Just For Fun"></a>Just For Fun</h1><ol><li><a href="#写在前面：">写在前面：</a></li><li><a href="#技术上的成长">技术上的成长</a></li><li><a href="#南京之行">南京之行</a></li><li><a href="#得与失">得与失</a></li><li><a href="#关于责任">关于责任</a></li><li><a href="#2017">2017</a></li><li><a href="#写在最后">写在最后</a></li></ol><h3 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a><a href="#写在前面：" title="写在前面："></a>写在前面：</h3><p>希望以后每年都能够写一篇年终总结，放到年终总结这个分类下面，我也不贪，写个七八十篇就OK了。</p><h3 id="技术上的成长"><a href="#技术上的成长" class="headerlink" title="技术上的成长"></a><a href="#技术上的成长" title="技术上的成长"></a>技术上的成长</h3><p>去年的这个时候，还在重构Twitter的个人页，那时候还不会写Js,冬令营10天（如果我没记错的话），前几天写完了静态页面，最后几天开始做些Js的交互，那时候实现一个很小的功能，比如写一个点击+1，点击改变背景颜色都要很久，写一个toast，可能需要一个下午。</p><p>4月份，参加百度IFE，做了一些练习，那期间也在刷红宝书，慢慢“找到一点写Javascript的感觉”，我还记得我在进度里写出这句话的愉悦感。也是这段时间，我发出了“CSS怎么这么神奇，不同特性搭配起来产生千奇百怪的效果”这种感叹，前段时间想起来很好笑，问前端的新人学妹是不是这个感觉，她很激动的告诉我是！</p><p>5月份写学而桌面版静态页面，那段时间CSS代码写的也是很渣、权重曲线、代码复用、可维护性都没有考虑，后来Boss的Codereview让我学到了我写CSS的一些基本原则，还有前端分享会对CSS权重曲线和代码维护方面的讨论也让很受益。也是这个时候开始学Vue，接触Vue的时候感觉很惊艳，像打了鸡血，然而印象最深的是学了一两周Vue，然后要用Vue写一个表单验证，当时还很吃力。</p><p>暑假的时候立了很多flag，看书还有写个人项目，很遗憾当时要看的书现在还没看完，想写的UI库也还没有开始，博客也没有写。然而flag还是要立的，万一去做了呢，然而暑假还是看了刷完了红宝书，看完了几本书。</p><p>夏令营的时候开始学node，当时觉得哇可以写后端了，那我不是成全栈了吗，好惊艳，嘿嘿哈哈哈哈哈，然后一口气又学了mongodb，基本的路由访问和数据库的增删查改没有问题了。接下来写了几个H5，第一次写H5真是很吃力，移动端不像PC端那样天下太平，就像“我们好不容易赶走了IE6、IE7、IE8，又出来一个微信浏览器”，那时，我好不容易写好整个H5，跑通了IOS的Safari、Chrome，然而应用场景是跑不通的QQ浏览器和UC。在电脑上测试，模拟各种浏览器都OK，真正的移动端一测试，简直惨不忍睹，折腾了半天，哦原来iOS上window.onload这个事件不支持、再折腾半天，原来父元素没有设百分之百，然后又各种不明觉厉折腾很久，当时的我还是too young too simple,最后发现特么的原来没加浏览器前缀。我依然记得刘聪问我：“你的H5改好了吗？”，“没有没有，明天就好”，“你的H5改好了吗？”，“没有没有，今晚不睡明天绝对好”，“你昨晚睡了吗？”，“睡了，H5改好了吗？”，“没有没有，下午就好了”…….</p><p>接下来写学而,完整的webpack配置，完整的Vue整套工具。总结下来，这一年的学习：</p><ul><li>桌面版学而静态页面</li><li>Vue.</li><li>gulp、grunt、webpack打包工具.</li><li>nodeJS.</li><li>mongodb.</li><li>H5.</li><li>学而移动版.</li></ul><p>读书：</p><ul><li>《ELOQUENT JAVASCRIPT》</li><li>《Javascript设计模式》</li><li>《Javascript新语》</li><li>《EXPLORING ES6》</li><li>《高性能Javascript》</li><li>《Secret of the Javascript Ninja》</li><li>《Vuejs权威指南》</li><li>《You-Don-t-Know-JS 上》</li><li>《CSS Secrets》</li><li>《Javascript Ninja》</li></ul><h3 id="南京之行"><a href="#南京之行" class="headerlink" title="南京之行"></a><a href="#南京之行" title="南京之行"></a>南京之行</h3><p>9月份的时候去南京参加JSConf，除去一些细节，这是2016年里最happy的体验之一，先说大会吧，虽然自己的参与度很糟，出发前的那个晚上改页面一面没睡，虽然到南京睡了一晚，第一天听的时候熬夜后遗症依然发作了，第二天忙着在现场改H5。然而我是不会错过尤小右的演讲，只可惜他并没有带来什么干货，更多的讲了Vue的发展以及它和现在流行的React、Angular的性能比较，似乎他的演讲更多的意义在于推广，当然其他的演讲的也大致了解讲了什么，如何打造一款编译器、3D、VR都很酷，VR和3D还在我们的前端热了一段时间。除了大会本身，我对南京这座城市影响也很好，建筑、街道逗比满城挖的武汉大气。在一个城市呆久了，去另一个城市会有一种不一样的感觉，然后就是在南京几天的体验，抛开一些细节，这是2016最满意的经历之一。</p><h3 id="得与失"><a href="#得与失" class="headerlink" title="得与失"></a><a href="#得与失" title="得与失"></a>得与失</h3><p>这一年，放弃了勾搭小学妹和小学妹的勾搭，放弃了一些可有可无的事，大多时候安安静静的写写代码，挺好。我仍然记得初入前端时的惊艳，原来我们见过的界面我都可以自己实现出来，这个过程让我感到快乐。后来接触到新的东西，接触到Vue、websocket、webpack、nodeJS都使我感到惊艳，使我感到像打了鸡血，感到快乐。做事情就应该是这样吧，应该让自己感到快乐。</p><p>也有遗憾，技术学习没有太大的成绩，下半年更是有些荒废，没什么进步，这段时间没有大的目标，没有做什么事情，遗憾。还有心境，时好时坏，做了一些不想做的事，也有时人云亦云渐渐极端，依旧看不惯装逼，不够平和。</p><h3 id="关于责任"><a href="#关于责任" class="headerlink" title="关于责任"></a><a href="#关于责任" title="关于责任"></a>关于责任</h3><p>责任是个很重的词，我一直以为自己是很有责任心得人，直到最近我才发现不是这样的，其实我一直在本能的远离很多事情，只有当别人都不去做的时候我才会去承担这件事情，当然很多时候别人是这样做的。我还自以为很有责任感，其实本质就是在逃避。看清这一点，希望在新的一年里在面对这些问题的时候有合理的处理方式。无论在什么状况下，先要把该做的事情做完。</p><h3 id="2017"><a href="#2017" class="headerlink" title="2017"></a><a href="#2017" title="2017"></a>2017</h3><p>新的一年，希望自己更加坚定、有目标、看的更远。开心的时候就好好做事情，不开心的时候，停下来静一静，安安静静写代码。希望自己记住，我所做的一切，Just For Fun，取悦自己就好。</p><p>flag还是要立的，今年要先立半年的。</p><p>首先最重要的事情就是要找实习了，以前看过的书要重新开始温习了。</p><p>要开始总结，开始完善博客。</p><p>Vue源码要尽快阅读一遍，实现一个自己的Vue。</p><p>自己要做的项目：一个H5框架。</p><p>团队项目：实现backbone、MUI。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a><a href="#写在最后" title="写在最后"></a>写在最后</h3><p>2017，希望又是成长的一年，踏踏实实写代码，踏踏实实实现flag。愿有岁月可回首，Just For Fun。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Just-For-Fun&quot;&gt;&lt;a href=&quot;#Just-For-Fun&quot; class=&quot;headerlink&quot; title=&quot;Just For Fun&quot;&gt;&lt;/a&gt;Just For Fun&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#写在前面：&quot;&gt;写在前面：&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sprite</title>
    <link href="http://yoursite.com/2018/02/01/sprite/"/>
    <id>http://yoursite.com/2018/02/01/sprite/</id>
    <published>2018-01-31T16:09:35.000Z</published>
    <updated>2018-03-02T06:59:20.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sprite"><a href="#sprite" class="headerlink" title="sprite"></a>sprite</h1><ol><li><a href="#关于雪碧图">关于雪碧图</a></li><li><a href="#制作雪碧图">制作雪碧图</a></li><li><a href="#使用background-position调整雪碧图">使用background-position调整雪碧图</a></li><li><a href="#无自适应效果的雪碧图">无自适应效果的雪碧图</a></li><li><a href="#容器大小自适应">容器大小自适应</a></li><li><a href="#图片大小自适应">图片大小自适应</a></li><li><a href="#图片偏移量自适应（background-position）">图片偏移量自适应（background-position）</a></li></ol><p>做移动开发的时候，有时会遇到使用很多图片的需求，然而<strong>过多图片会导致很多的http请求</strong>，带来很差的用户体验，为了解决这个问题，我们目前解决的办法是将图片合并成雪碧图，然后设置雪碧图为容器背景图。</p><h2 id="关于雪碧图"><a href="#关于雪碧图" class="headerlink" title="关于雪碧图"></a><a href="#关于雪碧图" title="关于雪碧图"></a>关于雪碧图</h2><p>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/CSS_Image_Sprites" target="_blank" rel="noopener">雪碧图</a></p><p>CSS雪碧图即CSS Sprite，也有人叫它CSS精灵，是一种CSS图像合并技术，该方法是将小图标和背景图像合并到一张图片上，然后利用css的背景定位<code>backgroun-position</code>和<code>background-size</code>来控制显示需要显示的图片部分。为了<strong>减少http请求数量，加速网页内容显示</strong>，很多网站的导航栏图标、登录框图片等，使用的并不是<code>&lt;img&gt;</code>标签，而是CSS Sprite雪碧图。</p><p><img src="http://res.cloudinary.com/da4uixfcu/image/upload/v1478744586/u9z0nzc5s3s4g7ja27uf.png" alt="sprite合成图片-1"></p><h2 id="制作雪碧图"><a href="#制作雪碧图" class="headerlink" title="制作雪碧图"></a><a href="#制作雪碧图" title="制作雪碧图"></a>制作雪碧图</h2><p>首先需要使用雪碧图制作工具来生成雪碧图，gulp、grunt、webpack都有相关工具。关键是要得到每个子图片在整张雪碧图中的<strong>高度、宽度、偏移量以及整张雪碧图的宽度和高度</strong>，然后再对这些值做计算<strong>转换</strong>使其可以适应页面。</p><p>下面我将以<code>webpack</code>+<code>webpack-spritesmith</code>为例来讲解如何制作雪碧图：</p><p><a href="https://github.com/mixtur/webpack-spritesmith" target="_blank" rel="noopener">webpack-spritesmith</a>是一个在<a href="https://github.com/Ensighten/spritesmith" target="_blank" rel="noopener">spritesmith</a>的基础上制作的一个工具，关于如何配合webpack使用可以阅读相关文档，也可以参考<a href="http://kyon-df.com/2016/03/16/webpack_auto_sprites/" target="_blank" rel="noopener">webpack自动雪碧图生成</a>。我在这里给出一种配置方式:</p><p>webpack.config.js：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var SpritesmithPlugin = require(&apos;webpack-spritesmith&apos;)</span><br><span class="line"></span><br><span class="line">new SpritesmithPlugin(&#123;</span><br><span class="line"></span><br><span class="line">    /*合成之前对源图片文件的配置*/</span><br><span class="line"></span><br><span class="line">    src: &#123;</span><br><span class="line"></span><br><span class="line">        /*子图片存放的路径（相对于更路径）*/</span><br><span class="line"></span><br><span class="line">        cwd: &apos;./static/img&apos;,</span><br><span class="line"></span><br><span class="line">        /*规定后缀名为png的图片合并成雪碧图*/</span><br><span class="line"></span><br><span class="line">        glob: &apos;*.png&apos;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    /*对合成之后产生文件的配置*/</span><br><span class="line"></span><br><span class="line">    target: &#123;</span><br><span class="line"></span><br><span class="line">        /*雪碧图存放的路径（相对于更路径）*/</span><br><span class="line"></span><br><span class="line">        image: &apos;./src/assets/sprite.png&apos;,</span><br><span class="line"></span><br><span class="line">        /*合成生成的scss文件存放的路径（相对于更路径）*/</span><br><span class="line"></span><br><span class="line">        css: &apos;./static/style/_sprite.scss&apos;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    apiOptions: &#123;</span><br><span class="line"></span><br><span class="line">        /*合成生成的scss中雪碧图的路径，将用于background-image的url*/</span><br><span class="line"></span><br><span class="line">        cssImageRef: &apos;../assets/sprite.png&apos;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    spritesmithOptions: &#123;</span><br><span class="line"></span><br><span class="line">        /*合成之后雪碧图中子图片的排列方式，top-down为从上往下排列*/</span><br><span class="line"></span><br><span class="line">        algorithm: &apos;top-down&apos;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>做好相关配置后，运行<code>webpack-spritesmith</code>会生成一份<code>_sprite.scss</code>文件(文件名与配置有关)。我们可以看到在这份文件中自动生成了合并之前的每个单份图片的<strong>尺寸、偏移量、名称、路径</strong>。同时还贴心的给我们写好了<code>mixin</code>,我们在使用的时候只需要引入这份scss文件，然后引入mixin就可以引入图片了。代码示例如下,我在代码注释中也对重要的部分做了说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"></span><br><span class="line">SCSS variables are information about icon&apos;s compiled state, stored under its original file name</span><br><span class="line"></span><br><span class="line">.icon-home &#123;</span><br><span class="line">    width: $icon-home-width;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">The large array-like variables contain all information about a single icon</span><br><span class="line"></span><br><span class="line">$icon-home: x y offset_x offset_y width height total_width total_height image_path;</span><br><span class="line"></span><br><span class="line">At the bottom of this section, we provide information about the spritesheet itself</span><br><span class="line"></span><br><span class="line">$spritesheet: width height image $spritesheet-sprites;</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">$img-1-name: &apos;img_1&apos;;    /*子图片名（去掉了后缀名），在引入子图时作为参数传入mixin*/</span><br><span class="line"></span><br><span class="line">$img-1-x: 0px;    /*子图片img-1，在x轴上的坐标*/</span><br><span class="line"></span><br><span class="line">$img-1-y: 0px;    /*子图片img-1，在y轴上的坐标*/</span><br><span class="line"></span><br><span class="line">/*在引入子图片img-1，在x轴上的偏移量，将用于background-position*/</span><br><span class="line"></span><br><span class="line">$img-1-offset-x: 0px;    </span><br><span class="line"></span><br><span class="line">/*在引入子图片img-1，在y轴上的偏移量，将用于background-position*/</span><br><span class="line"></span><br><span class="line">$img-1-offset-y: 0px;    </span><br><span class="line"></span><br><span class="line">$img-1-width: 1444px;    /*子图片img-1的宽度*/</span><br><span class="line"></span><br><span class="line">$img-1-height: 893px;    /*子图片img-1的高度*/</span><br><span class="line"></span><br><span class="line">$img-1-total-width: 1920px;    /*整张雪碧图的宽度*/</span><br><span class="line"></span><br><span class="line">$img-1-total-height: 3009px;    /*整张雪碧图的高度*/</span><br><span class="line"></span><br><span class="line">/*雪碧图的路径，用于background-image的url*/</span><br><span class="line"></span><br><span class="line">$img-1-image: &apos;../assets/sprite.png&apos;;</span><br><span class="line"></span><br><span class="line">/*定义一个数据地图（可以理解为数组）,方便mixin中对上面的各个值引用,要使用每个子图的偏移量、高度、宽度等数据时直接使用nth(img-1-name, n)*/ </span><br><span class="line"></span><br><span class="line">$img-1: (0px, 0px, 0px, 0px, 1444px, 893px, 1920px, 3009px, &apos;../assets/sprite.png&apos;, &apos;img_1&apos;, );</span><br><span class="line"></span><br><span class="line">$img-2-name: &apos;img_2&apos;;</span><br><span class="line"></span><br><span class="line">$img-2-x: 0px;</span><br><span class="line"></span><br><span class="line">$img-2-y: 893px;</span><br><span class="line"></span><br><span class="line">$img-2-offset-x: 0px;</span><br><span class="line"></span><br><span class="line">$img-2-offset-y: -893px;</span><br><span class="line"></span><br><span class="line">$img-2-width: 1719px;</span><br><span class="line"></span><br><span class="line">$img-2-height: 1037px;</span><br><span class="line"></span><br><span class="line">$img-2-total-width: 1920px;</span><br><span class="line"></span><br><span class="line">$img-2-total-height: 3009px;</span><br><span class="line"></span><br><span class="line">$img-2-image: &apos;../assets/sprite.png&apos;;</span><br><span class="line"></span><br><span class="line">$img-2: (0px, 893px, 0px, -893px, 1719px, 1037px, 1920px, 3009px, &apos;../assets/sprite.png&apos;, &apos;img_2&apos;, );</span><br><span class="line"></span><br><span class="line">$img-3-name: &apos;img_3&apos;;</span><br><span class="line"></span><br><span class="line">$img-3-x: 0px;</span><br><span class="line"></span><br><span class="line">$img-3-y: 1930px;</span><br><span class="line"></span><br><span class="line">$img-3-offset-x: 0px;</span><br><span class="line"></span><br><span class="line">$img-3-offset-y: -1930px;</span><br><span class="line"></span><br><span class="line">$img-3-width: 1920px;</span><br><span class="line"></span><br><span class="line">$img-3-height: 1079px;</span><br><span class="line"></span><br><span class="line">$img-3-total-width: 1920px;</span><br><span class="line"></span><br><span class="line">$img-3-total-height: 3009px;</span><br><span class="line"></span><br><span class="line">$img-3-image: &apos;../assets/sprite.png&apos;;</span><br><span class="line"></span><br><span class="line">$img-3: (0px, 1930px, 0px, -1930px, 1920px, 1079px, 1920px, 3009px, &apos;../assets/sprite.png&apos;, &apos;img_3&apos;, );</span><br><span class="line"></span><br><span class="line">$spritesheet-width: 1920px;</span><br><span class="line"></span><br><span class="line">$spritesheet-height: 3009px;</span><br><span class="line"></span><br><span class="line">$spritesheet-image: &apos;../assets/sprite.png&apos;;</span><br><span class="line"></span><br><span class="line">$spritesheet-sprites: ($img-1, $img-2, $img-3, );</span><br><span class="line"></span><br><span class="line">$spritesheet: (1920px, 3009px, &apos;../assets/sprite.png&apos;, $spritesheet-sprites, );</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line">The provided mixins are intended to be used with the array-like variables</span><br><span class="line"></span><br><span class="line">.icon-home &#123;</span><br><span class="line"></span><br><span class="line">    @include sprite-width($icon-home);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.icon-email &#123;</span><br><span class="line"></span><br><span class="line">    @include sprite($icon-email);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Example usage in HTML:</span><br><span class="line"></span><br><span class="line">`display: block` sprite:</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;icon-home&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:</span><br><span class="line"></span><br><span class="line">// CSS</span><br><span class="line"></span><br><span class="line">.icon &#123;</span><br><span class="line"></span><br><span class="line">    display: inline-block;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// HTML</span><br><span class="line"></span><br><span class="line">&lt;i class=&quot;icon icon-home&quot;&gt;&lt;/i&gt;</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line">定义一个使用雪碧图的宽度值的width属性</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@mixin sprite-width($sprite) &#123;</span><br><span class="line"></span><br><span class="line">    width: nth($sprite, 5);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line">定义一个使用雪碧图的高度值的height属性</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@mixin sprite-height($sprite) &#123;</span><br><span class="line"></span><br><span class="line">    height: nth($sprite, 6);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line">使用子图偏移量来设置background-position的值</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@mixin sprite-position($sprite) &#123;</span><br><span class="line"></span><br><span class="line">    $sprite-offset-x: nth($sprite, 3);</span><br><span class="line"></span><br><span class="line">    $sprite-offset-y: nth($sprite, 4);</span><br><span class="line"></span><br><span class="line">    background-position: $sprite-offset-x  $sprite-offset-y;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line">定义雪碧图的路径</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@mixin sprite-image($sprite) &#123;</span><br><span class="line"></span><br><span class="line">    $sprite-image: nth($sprite, 9);</span><br><span class="line"></span><br><span class="line">    background-image: url(#&#123;$sprite-image&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line">把上面的代码块导入到名为sprite的mixin中，使用时导入这个代码块就同时配置了背景图片的路径、显示位置、宽度、高度</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">@mixin sprite($sprite) &#123;</span><br><span class="line"></span><br><span class="line">    /*定义雪碧图的路径*/</span><br><span class="line"></span><br><span class="line">    @include sprite-image($sprite);</span><br><span class="line"></span><br><span class="line">    //使用background-position来让雪碧图只显示某个特定部分*/</span><br><span class="line"></span><br><span class="line">    @include sprite-position($sprite);</span><br><span class="line"></span><br><span class="line">    //定义使用雪碧图的容器的宽度*/</span><br><span class="line"></span><br><span class="line">    @include sprite-width($sprite);</span><br><span class="line"></span><br><span class="line">    //定义使用雪碧图的容器的高*/</span><br><span class="line"></span><br><span class="line">    @include sprite-height($sprite);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这个mixin传入多个参数可以循环引入多张子图</p><p>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$sprites:($img_1,$img_2,$img_3)</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line"></span><br><span class="line">    @include sprites($sprites)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>效果等同与：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line"></span><br><span class="line">    .img_1 &#123;</span><br><span class="line"></span><br><span class="line">        @include sprite($img_1)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .img_2 &#123;</span><br><span class="line"></span><br><span class="line">        @include sprite($img_2)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .img_2 &#123;</span><br><span class="line"></span><br><span class="line">        @include sprite($img_2)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@mixin sprites($sprites) &#123;</span><br><span class="line"></span><br><span class="line">    @each $sprite in $sprites &#123;</span><br><span class="line"></span><br><span class="line">        $sprite-name: nth($sprite, 10);</span><br><span class="line"></span><br><span class="line">        .#&#123;$sprite-name&#125; &#123;</span><br><span class="line"></span><br><span class="line">            @include sprite($sprite);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了在线演示，将背景图片的url改成了在线地址.</p><p>如果在某个地方需要使用雪碧图作为背景，我们只要引入这份SCSS文件，然后再使用它的地方导入mixin就可以了。例如有如下的HTML结构需要使用雪碧图作为背景：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/*这个div需要使用img_1.png作为背景图片.*/</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;icon_img_1&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>我们只需要在这样写SCSS代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/*假设雪碧图生成的SCSS文件的相对路径是_sprite.scss.</span><br><span class="line"></span><br><span class="line">/*引入雪碧图生成的SCSS文件*/</span><br><span class="line"></span><br><span class="line">@import url(&apos;./scss/_sprite.scss&apos;)</span><br><span class="line"></span><br><span class="line">/*导入mixin*/</span><br><span class="line"></span><br><span class="line">.icon_img_1 &#123;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line"></span><br><span class="line">    其他定义类名为icon_img_1的div样式的SCSS代码</span><br><span class="line"></span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    /*参数为以美元符号开头的去掉后缀的子图片文件名*/</span><br><span class="line"></span><br><span class="line">    @include sprite($img_1)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用background-position调整雪碧图"><a href="#使用background-position调整雪碧图" class="headerlink" title="使用background-position调整雪碧图"></a><a href="#使用background-position调整雪碧图" title="使用background-position调整雪碧图"></a>使用background-position调整雪碧图</h2><p>首先介绍一下使用background-position调整雪碧图位置的原理，非小白可以直接看下一部分。</p><p>我们要引入雪碧图张的一张子图作为容器的背景图，我们必须控制只有这个子图显示在容器里，CSS设置背景图的众多属性中有一个属性background-position是设置背景图在容器里面显示位置的,我们称这个值为偏移量，我们只要使用这个属性控制背景图在容器里面的显示位置，刚好使子图出现在容器中，而雪碧图的其它部分刚好不显示。</p><p><img src="http://res.cloudinary.com/da4uixfcu/image/upload/v1478744586/u9z0nzc5s3s4g7ja27uf.png" alt="sprite合成图片-2"></p><p>如果在引入雪碧图过程中不要求自适应的话，那么整张雪碧图和以雪碧图为背景的容器的大小都是固定的，此时background-position值也是固定的数值，<code>background-position: xpos ypos</code>是数值时，第一个值是水平位置，第二个值是垂直位置，参照点是父元素的左上角 0 0.</p><p>如果要求自适应,那么整张雪碧图和以雪碧图为背景的容器的大小都是不固定的.此时背景图片的大小要用<code>background-size</code>设置，<code>background-position</code>的值也应该是一个比例，这篇文章主要就是讨论这种情况下怎么设置这两个值，我们将在文中讨论.</p><h2 id="无自适应效果的雪碧图"><a href="#无自适应效果的雪碧图" class="headerlink" title="无自适应效果的雪碧图"></a><a href="#无自适应效果的雪碧图" title="无自适应效果的雪碧图"></a>无自适应效果的雪碧图</h2><p>现在我们<strong>不做任何修改</strong>，将雪碧图引入：</p><p>引入子图img_1：<a href="http://codepen.io/no1024/pen/mAKvrA" target="_blank" rel="noopener">点击查看代码效果</a></p><p>引入子图img_2：<a href="http://codepen.io/no1024/pen/jrpAaR/" target="_blank" rel="noopener">点击查看代码效果</a></p><p>我们现在已经成功引入雪碧图作为背景图片了，这在图片大小是固定的情况下是没有任何问题的。但是如果要求背景图片大小可以随着浏览器窗口大小不同而能够自适应，我们调整浏览器窗口大小，我们发现图片宽高并不能自适应屏幕的宽高.</p><h2 id="容器大小自适应"><a href="#容器大小自适应" class="headerlink" title="容器大小自适应"></a><a href="#容器大小自适应" title="容器大小自适应"></a>容器大小自适应</h2><p>要实现随着浏览器宽度或者高度调整，我们要将雪碧图容器的宽度或者高度设置为百分比，然后再设置背景图片填满容器。这个百分比的计算方式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">width:设计图中图片的的宽度/图片所在页面的宽度</span><br><span class="line"></span><br><span class="line">height:设计图中图片的的高度/图片所在页面的高度</span><br></pre></td></tr></table></figure><p>下面我们修改一下代码：</p><p>把：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@mixin sprite-width($sprite) &#123;</span><br><span class="line"></span><br><span class="line">    width: nth($sprite, 5);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@mixin sprite-height($sprite) &#123;</span><br><span class="line"></span><br><span class="line">    height: nth($sprite, 6);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/*把容器的宽高改成百分比，这个百分比应该是按照图片占设计图的宽高的百分比，假设改为90%*/</span><br><span class="line"></span><br><span class="line">@mixin sprite-width($sprite) &#123;</span><br><span class="line"></span><br><span class="line">    width: 90%;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@mixin sprite-height($sprite) &#123;</span><br><span class="line"></span><br><span class="line">    height: 90%;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://res.cloudinary.com/da4uixfcu/image/upload/v1478744787/jesf6spf2r9tuqpjppvg.jpg" alt="sprite合成图片-3"></p><p>引入子图img_1：<a href="http://codepen.io/no1024/pen/BLOoqP" target="_blank" rel="noopener">点击查看代码效果</a></p><p><img src="http://res.cloudinary.com/da4uixfcu/image/upload/v1478744879/bmmhimkj8gati5vjgf9l.png" alt="sprite合成图片-4"></p><p>引入子图img_2：<a href="http://codepen.io/no1024/pen/ORoyaw" target="_blank" rel="noopener">点击查看代码效果</a></p><p>现在调整屏幕宽高，我们发现容器的大小自适应屏幕的宽高了，但是图片还没有自适应。</p><h2 id="图片大小自适应"><a href="#图片大小自适应" class="headerlink" title="图片大小自适应"></a><a href="#图片大小自适应" title="图片大小自适应"></a>图片大小自适应</h2><p>容器大小自适应了，但是为什么背景图片的大小不能自适应呢？因为我们给<code>background-size</code>设了定值，所以即使容器大小改变，背景图片的大小始终是一个定值。我们要让背景图片大小跟着容器大小一起调整，显然我们需要使用<code>background-size</code>给图片设置一个<strong>相对于容器大小的百分比</strong>。但是这个百分比是多少呢？我们要先明确<code>background-size</code>的计算方式，当<code>background-size</code>的值是<strong>百分比</strong>时，<code>background-size</code>的计算值（浏览器渲染是使用的值）是<code>百分比*容器宽度或高度的计算值</code>，也就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">background-size的设置值：</span><br><span class="line"></span><br><span class="line">background-size: x%  y%;</span><br><span class="line"></span><br><span class="line">background-size的计算值：</span><br><span class="line"></span><br><span class="line">background-size: x%*容器的宽度  y%*容器的高度;</span><br></pre></td></tr></table></figure><p>所以背景图片的展示的时候会被调整为以<code>width:x%*父容器的宽度</code>,<code>height:y%*父容器的高度</code>的图片;</p><p>下面我们看看这个百分比究竟应该设为多少。我们要引入一个子图到一个容器中，那么这个子图要填满容器，子图就应该被设置成容器大小，也就是子图的背景大小应该设置为<code>background-size：100% 100%；</code>，然而<code>background-size</code>会作用到整张雪碧图上，如下：</p><p>我们添加一个<code>background-size</code>的mixin,设置<code>background-size</code>值为100%:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@mixin sprite-size($sprite) &#123;</span><br><span class="line"></span><br><span class="line">    background-size: 100%  100%;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://res.cloudinary.com/da4uixfcu/image/upload/v1478745366/sfc2fokc8jcvxpku8ytn.png" alt="sprite合成图片-5"></p><p>引入子图img_1：<a href="http://codepen.io/no1024/pen/mAGZgx" target="_blank" rel="noopener">点击查看效果</a></p><p>我们看到<code>background-size</code>作用在了整张雪碧图上而不是作用在子图上，通过为背景图片设置<code>backgroun-size:100% 100%;</code>后<strong>整张雪碧图</strong>刚好填满了容器。我们要的只是<strong>其中的某一个子图来填充容器</strong>，那么我们要思考当这个值是多少的时候<strong>整张雪碧图中的子图</strong>刚好是容器的大小。我们知道，生成雪碧图后子图和整张雪碧图都是固定大小的，那么<strong>子图的宽高和整张雪碧图的宽高比例是固定的</strong>，所以我们应当设置整张雪碧图的宽高到<code>(整张雪碧图的宽高/子图的宽高)*100%</code>，此时子图的宽高刚好等于容器的宽高。即backgroun-size`的计算方式应该为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">background-size: (雪碧图的宽度/子图的宽度)\*100% (雪碧图的高度/子图的高度)\*100%;</span><br></pre></td></tr></table></figure><p>在实际应用中，一般会根据浏览器的宽度或者高度来做自适应，如果两个方向上的值都设置会造成图片的拉伸或者压缩，所以background-size只用设置x或者y方向上的值。在下面的例子中我们将讲解如何设置y方向上的值，让x方向上自适应，这样可以保证图片原始的宽高比例。所以我们将:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@mixin sprite-size($sprite) &#123;</span><br><span class="line"></span><br><span class="line">    background-size: 100%  100%;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@mixin sprite-size($sprite,$img_height) &#123;</span><br><span class="line"></span><br><span class="line">    $sprite-total-height: nth($sprite, 8);</span><br><span class="line"></span><br><span class="line">    background-size: auto  ($sprite-total-height / $img_height) \* 100%;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的我们也要修改引入mixin的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@mixin sprite($sprite,$img_height) &#123;</span><br><span class="line"></span><br><span class="line">    /*增加参数$img_height*/</span><br><span class="line"></span><br><span class="line">    @include sprite-size($sprite,$img_height);</span><br><span class="line"></span><br><span class="line">    @include sprite-image($sprite);</span><br><span class="line"></span><br><span class="line">    @include sprite-width($sprite);</span><br><span class="line"></span><br><span class="line">    @include sprite-height($sprite);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line"></span><br><span class="line">    /*增加参数$img_height*/</span><br><span class="line"></span><br><span class="line">    @include sprite($img-1,893px);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://res.cloudinary.com/da4uixfcu/image/upload/v1478745545/vp2tjvkeom75qahcltof.png" alt="sprite合成图片-6"></p><p>引入子图img_1：<a href="http://codepen.io/no1024/pen/xEakxq" target="_blank" rel="noopener">点击查看代码效果</a></p><p><img src="http://res.cloudinary.com/da4uixfcu/image/upload/v1478745777/mhvopunmcuwmyvssffr4.png" alt="sprite合成图片-7"></p><p>引入子图img_2：<a href="http://codepen.io/no1024/pen/bwxEGk" target="_blank" rel="noopener">点击查看代码效果</a></p><p>不妨调节浏览器的高度，你会发现子图img_1的高度完美自适应了，但是子图img_2并不能正常引入.</p><h2 id="图片偏移量自适应（background-position）"><a href="#图片偏移量自适应（background-position）" class="headerlink" title="图片偏移量自适应（background-position）"></a><a href="#图片偏移量自适应（background-position）" title="图片偏移量自适应（background-position）"></a>图片偏移量自适应（background-position）</h2><p>在引入img_2,我们看到效果很糟糕，这是因为针对不同的屏幕高度，在上面的讨论中我们的得到到的代码会将<strong>雪碧图放大到了不同的倍数</strong>，然而我们代码中的<code>background-position</code>依然是一个<strong>定值</strong>,所以我们现在要重新的计算雪碧图的偏移量<code>background-position</code>值.既然雪碧图的大小是一个比例，那么<strong>background-position这个值也应该是一个比例</strong>，这个比例怎么计算呢？我们要先明确当其值为百分比时它的实际值的计算方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">background-postion:x y;</span><br><span class="line"></span><br><span class="line">x：&#123;容器(container)的宽度—背景图片的宽度&#125;*x百分比，超出的部分隐藏。</span><br><span class="line"></span><br><span class="line">y：&#123;容器(container)的高度—背景图片的高度&#125;*y百分比，超出的部分隐藏。</span><br></pre></td></tr></table></figure><p>也是就是说我们需要设置的这个百分比的计算方式应该是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">background-postion:x y;</span><br><span class="line"></span><br><span class="line">x百分比：background-postion-x实际值/&#123;容器(container)的宽度—背景图片的宽度&#125;*100%。</span><br><span class="line"></span><br><span class="line">y百分比：background-postion-y实际值/&#123;容器(container)的高度—背景图片的高度&#125;*100%。</span><br></pre></td></tr></table></figure><p>所以求<code>background-position</code>的偏移量的代码块：</p><p>由：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@mixin sprite-position($sprite) &#123;</span><br><span class="line"></span><br><span class="line">    $sprite-offset-x: nth($sprite, 3);</span><br><span class="line"></span><br><span class="line">    $sprite-offset-y: nth($sprite, 4);</span><br><span class="line"></span><br><span class="line">    background-position: $sprite-offset-x  $sprite-offset-y;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@mixin sprite-position($sprite,$img_height) &#123;</span><br><span class="line"></span><br><span class="line">    $sprite-total-height: nth($sprite, 8);</span><br><span class="line"></span><br><span class="line">    $sprite-total-width: nth($sprite, 7);</span><br><span class="line"></span><br><span class="line">    $sprite-y: nth($sprite, 2) / ($sprite-total-height \- $img_height) \* 100%;</span><br><span class="line"></span><br><span class="line">    background-position: 0  $sprite-y;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们再来看一下效果:</p><p><img src="http://res.cloudinary.com/da4uixfcu/image/upload/v1478745915/rc9amrquhgxtokcm0x6u.png" alt="sprite合成图片-8"></p><p>引入子图img_1：<a href="http://codepen.io/no1024/pen/YGOwXZ" target="_blank" rel="noopener">点击查看代码效果</a></p><p><img src="http://res.cloudinary.com/da4uixfcu/image/upload/v1478745876/sq3jkq7c7kfdrvxghpqu.png" alt="sprite合成图片-9"></p><p>引入子图img_2：<a href="http://codepen.io/no1024/pen/KgxVpP" target="_blank" rel="noopener">点击查看代码效果</a></p><p>自此我们实现了雪碧图按照浏览器高度来实现自适应，宽度的自适应是同样的思考和计算方式.</p><p>我写了一个<a href="https://gist.github.com/shengxihu/d00e38a0d17c71a11fdead6da45b93e4" target="_blank" rel="noopener">gist代码片段</a>，使用的时候将webpack-spritesmith输出的SCSS文件中对应的部分替换就可以实现.</p><p>备注：实现请参考<a href="https://github.com/Muxi-Studio/freshman-h5" target="_blank" rel="noopener">项目地址</a>。</p><p><a href="/tags/Img/">Img</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sprite&quot;&gt;&lt;a href=&quot;#sprite&quot; class=&quot;headerlink&quot; title=&quot;sprite&quot;&gt;&lt;/a&gt;sprite&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#关于雪碧图&quot;&gt;关于雪碧图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#制作
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vuejs-event-system</title>
    <link href="http://yoursite.com/2018/02/01/Vuejs-event-system/"/>
    <id>http://yoursite.com/2018/02/01/Vuejs-event-system/</id>
    <published>2018-01-31T16:08:39.000Z</published>
    <updated>2018-03-02T07:31:23.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vuejs-event-system"><a href="#Vuejs-event-system" class="headerlink" title="Vuejs-event-system"></a>Vuejs-event-system</h1><ol><li><a href="#组件之间通信的原则">组件之间通信的原则</a></li><li><a href="#实现">实现</a><ol><li><a href="#自定义事件">自定义事件</a></li><li><a href="#全局事件总线-global-event-bus">全局事件总线(global event bus)</a></li></ol></li></ol><p>在开发多组件应用是，经常涉及到不同组件之间的通信问题，组件的作用域是相互独立的，我们当然可以直接引用父子组件来同步组件之间的状态，然而这种实现是高耦合的，与我们组件化的思想刚好相悖。<br>使用一种合理的组件之间的通信方式有利于提高组件的健壮性与可维护性。</p><h3 id="组件之间通信的原则"><a href="#组件之间通信的原则" class="headerlink" title="组件之间通信的原则"></a><a href="#组件之间通信的原则" title="组件之间通信的原则"></a>组件之间通信的原则</h3><p>使用props从父组件向子组件传递数据</p><p>使用event从子组件通知父组件改变数据</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a><a href="#实现" title="实现"></a>实现</h3><h4 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a><a href="#自定义事件" title="自定义事件"></a>自定义事件</h4><p>使用自定义事件，我们可以在子组件触发事件，在父组件监听事件。</p><p>于是父子组件的通信可以实现为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;example&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&#123;&#123; total &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;App v-on:incre=&quot;incrementTotal&quot;&gt;&lt;/App&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line"></span><br><span class="line">el: &apos;#example&apos;,</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line"></span><br><span class="line">total: 0</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">components:&#123;</span><br><span class="line"></span><br><span class="line">App: App</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line"></span><br><span class="line">incrementTotal() &#123;</span><br><span class="line"></span><br><span class="line">this.total += 1</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;button v-on:click=&quot;increment&quot;&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  name: &apos;app&apos;,</span><br><span class="line"></span><br><span class="line">  data: function () &#123;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line"></span><br><span class="line">      counter: 0</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line"></span><br><span class="line">    increment() &#123;</span><br><span class="line"></span><br><span class="line">      this.counter += 1</span><br><span class="line"></span><br><span class="line">      this.$emit(&apos;incre&apos;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="全局事件总线-global-event-bus"><a href="#全局事件总线-global-event-bus" class="headerlink" title="全局事件总线(global event bus)"></a><a href="#全局事件总线-global-event-bus" title="全局事件总线(global event bus)"></a>全局事件总线(global event bus)</h4><p>Vue本身实现了一套独立于原生事件之外的的事件系统，我们可以实例化一个Vue构造函数，在父组件中利用这个实例注册注册一个监听事件，然后在子组件中触发这个事件。</p><p>于是父子组件之间的通信可以实现为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;msg :bus=&apos;bus&apos;&gt;&lt;/msg&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">var bus = new Vue()</span><br><span class="line"></span><br><span class="line">this.bus.$on(&apos;evt&apos;,function () &#123;</span><br><span class="line"></span><br><span class="line">    console.log(&apos;On!&apos;);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">name: &apos;app&apos;,</span><br><span class="line"></span><br><span class="line">data()&#123;</span><br><span class="line"></span><br><span class="line">return &#123;</span><br><span class="line"></span><br><span class="line">bus: bus</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">components: &#123;</span><br><span class="line"></span><br><span class="line">Msg</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;hello&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1 @click=&quot;test&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">name: &apos;hello&apos;,</span><br><span class="line"></span><br><span class="line">props: \[&apos;bus&apos;\],</span><br><span class="line"></span><br><span class="line">data () &#123;</span><br><span class="line"></span><br><span class="line">return &#123;</span><br><span class="line"></span><br><span class="line">msg: &apos;Welcome to Your Vue.js App&apos;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">methods:&#123;</span><br><span class="line"></span><br><span class="line">test()&#123;</span><br><span class="line"></span><br><span class="line">console.log(&apos;Emit!&apos;);</span><br><span class="line"></span><br><span class="line">this.bus.$emit(&apos;evt&apos;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在同一个Vue实例上可以触发并监听事件，因此我们可以在父组件中实例化一个Vue构造函数，在一个组件中绑定监听函数，在另一个平行组件中触发这个函数。</p><p>于是同级组件之间的通信可以实现为：</p><p>``<br><!-- 父组件 --></p><template><br><br>    <div id="app"><br><br>        <hello :bus="bus"></hello><br><br>        <msg :bus="bus"></msg><br><br>    </div><br><br></template><p>var bus = new Vue();</p><p>export default {</p><pre><code>name: &apos;app&apos;,data(){    return {        bus: bus    }},components: {    Hello,    Msg}</code></pre><p>}</p><!-- 子组件A --><template><br><br>    <div class="hello"><br><br>        <h1></h1><br><br>    </div><br><br></template><p>export default {</p><pre><code>name: &apos;hello&apos;,props: \[&apos;bus&apos;\],data () {    return {        msg: &apos;Welcome to Your Vue.js App&apos;    }},mounted(){    this.bus.$on(&apos;evt&apos;,function () {        console.log(&apos;On!&apos;);    })</code></pre><p>  }</p><p>}</p><!-- 子组件B --><template><br><br>    <div class="msg"><br><br>        <h1 @click="test"></h1><br><br>    </div><br><br></template><p>export default {</p><pre><code>name: &apos;hello&apos;,props: \[&apos;bus&apos;\],data () {    return {        msg: &apos;Welcome to Your Vue.js App&apos;    }  },methods:{    test(){        console.log(&apos;Emit!&apos;);        this.bus.$emit(&apos;evt&apos;);    }}</code></pre><p>}<br>```</p><p><a href="/tags/Vue-js/">Vue.js</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vuejs-event-system&quot;&gt;&lt;a href=&quot;#Vuejs-event-system&quot; class=&quot;headerlink&quot; title=&quot;Vuejs-event-system&quot;&gt;&lt;/a&gt;Vuejs-event-system&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Build Your First Node App</title>
    <link href="http://yoursite.com/2018/02/01/Build-Your-First-Node-App/"/>
    <id>http://yoursite.com/2018/02/01/Build-Your-First-Node-App/</id>
    <published>2018-01-31T16:07:18.000Z</published>
    <updated>2018-03-02T07:04:32.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Build-Your-First-Node-App"><a href="#Build-Your-First-Node-App" class="headerlink" title="Build Your First Node App"></a>Build Your First Node App</h1><ol><li><a href="#Hello-World">Hello World</a></li><li><a href="#一个完整的node的web应用">一个完整的node的web应用</a></li><li><a href="#应用构建">应用构建</a></li></ol><p>这是一片node入门级别的文章，着重介绍使用node实现一个小型web应用的过程，不会涉及关于原理方面的知识，作为一个初学者，文章中如有不合理的地方还请指正。</p><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a><a href="#Hello-World" title="Hello World"></a>Hello World</h3><p>首先我们来实现一个Hello World。</p><p>打开编辑器，创建一个helloWord.js文件，写入以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;Hello World!&apos;)</span><br></pre></td></tr></table></figure><p>保存文件后通过在命令行执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node helloWord.js</span><br></pre></td></tr></table></figure><p>你会看到命令行输出’Hello World!’。<br>这个应用太小儿科了对吧，那我们来点‘干货’。</p><h3 id="一个完整的node的web应用"><a href="#一个完整的node的web应用" class="headerlink" title="一个完整的node的web应用"></a><a href="#一个完整的node的web应用" title="一个完整的node的web应用"></a>一个完整的node的web应用</h3><p>对于初学者来说，我们不太可能写出复杂的web应用，那我们来个简单点儿的！</p><p>我将这个应用的需求设定为：</p><p>用户可以使用浏览器访问我们的应用。<br>用户在浏览器中输入 ‘<a href="http://domain/start‘" target="_blank" rel="noopener">http://domain/start‘</a> 时页面中会出现一个表单。<br>用户在表单中输入用户名并提交，页面跳转到 ‘<a href="http://domain/hello‘" target="_blank" rel="noopener">http://domain/hello‘</a> 并显示欢迎信息。<br>下面我们来分析这个应用如何分布实现；</p><p>我们需要提供web页面，并且可以提交表单，所以我们需要一个HTTP服务器。<br>我们需要在不同的URL之间跳转，针对不同URL给出响应，所以我们需要一个路由.<br>路由需要处理表单提交的数据，所以我们需要事件处理程序。<br>我们来一步步实现：</p><h3 id="应用构建"><a href="#应用构建" class="headerlink" title="应用构建"></a><a href="#应用构建" title="应用构建"></a>应用构建</h3><p>在开始编码之前，我们需要考虑如何组织我们的代码，我们当然可以在一个单独文件中编写所有代码，但这个不利于后期修改和拓展，并且代码可读性也会变得很差，如果你有模块化相关得知识，你应该很清楚这样做的缺点。</p><p>所以我们选择将不同功能的代码放入不同的模块中，使用不同模块时只需在主文件中引入即可。<br>首先我们创建’index.js’作为我们的入口文件（主文件），执行应用时直接运行入口文件即可。</p><p>然后我们创建一个用于启动服务器的文件，语义化的将其命名为’server.js’，并写入以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&quot;http&quot;);</span><br><span class="line"></span><br><span class="line">function onRequest(request, response) &#123;</span><br><span class="line"></span><br><span class="line">    //下面一行为增加部分</span><br><span class="line"></span><br><span class="line">    console.log(&quot;Request received.&quot;);</span><br><span class="line"></span><br><span class="line">    response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line"></span><br><span class="line">    response.write(&quot;Hello World&quot;);</span><br><span class="line"></span><br><span class="line">    response.end();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http.createServer(onRequest).listen(8888);</span><br><span class="line"></span><br><span class="line">console.log(&quot;Server has started.&quot;);</span><br><span class="line"></span><br><span class="line">console.log(&apos;在浏览器中打开 http://localhost:8080/ 查看效果！&apos;);</span><br></pre></td></tr></table></figure><p>现在我们实现了一个可以工作的HTTP服务器，这当然不是最终代码，在构建的过程中我们还是需要了解一下实现的细节。</p><p>使用node执行脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure><p>接下来在浏览器中打开 ‘<a href="http://localhost:8080/‘" target="_blank" rel="noopener">http://localhost:8080/‘</a> ，你就会看到一个写着 ‘Hello World!’ 的页面。</p><p>分析代码实现：</p><p>第一行请求（require）Node.js内置的 http 模块，并且把它赋值给 http 变量。</p><p>接下来我们调用http模块提供的函数： ‘createServer’ 。这个函数会返回一个对象，这个对象有一个叫做 ‘listen’ 的方法，这个方法有一个数值参数，指定这个HTTP服务器监听的端口号。</p><p>‘http.createServer ‘方法接受一个回调函数，侦听指定端口的服务器在收到一个HTTP请求的时会调用这个函数。</p><p>当收到请求时，使用 response.writeHead() 回调函数发送一个HTTP状态200和HTTP头的内容类型（content-type），使用 response.write() 回调函数在HTTP相应主体中发送文本“Hello World”。response.end()结束响应。</p><p>现在我们将服务器代码变成一个可供调用的模块：<br>将服务器脚本放到一个叫做 start 的函数里，然后导出这个函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&quot;http&quot;);</span><br><span class="line"></span><br><span class="line">function start()&#123;</span><br><span class="line"></span><br><span class="line">    function onRequest(request, response) &#123;</span><br><span class="line"></span><br><span class="line">        //下面一行为增加部分</span><br><span class="line"></span><br><span class="line">        console.log(&quot;Request received.&quot;);</span><br><span class="line"></span><br><span class="line">        response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line"></span><br><span class="line">        response.write(&quot;Hello World&quot;);</span><br><span class="line"></span><br><span class="line">        response.end();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    http.createServer(onRequest).listen(8080);</span><br><span class="line"></span><br><span class="line">    console.log(&quot;Server has started.&quot;);</span><br><span class="line"></span><br><span class="line">    console.log(&apos;Open http://localhost:8080/ in browser to checkout！&apos;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.start = start;</span><br></pre></td></tr></table></figure><p>创建 index.js 文件并写入以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var server = require(&quot;./server&quot;);</span><br><span class="line"></span><br><span class="line">server.start();</span><br><span class="line"></span><br><span class="line">我们现在已经创建了一个启动服务器的模块，并在入口文件中调用这个模块，通过执行入口来启动服务器：</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">node index.js</span><br></pre></td></tr></table></figure><p>你可能会好奇为什么输出了两次 ‘Request received’这是因为访问’<a href="http://localhost:8080/‘" target="_blank" rel="noopener">http://localhost:8080/‘</a> 时浏览器会尝试读取 ‘<a href="http://localhost:8888/favicon.ico‘" target="_blank" rel="noopener">http://localhost:8888/favicon.ico‘</a> 文件。</p><p>进行路由选择</p><p>还记得我们的我们给服务器代码的回调函数传入了两个参数吗？我们还没有使用 request 参数，这是一个对象，包含请求信息。</p><p>要针对不同路由实现不同操作，我们需要使用node的url模块解析请求的URL。</p><p>修改服务器代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&quot;http&quot;),</span><br><span class="line"></span><br><span class="line">url = require(&apos;url&apos;);</span><br><span class="line"></span><br><span class="line">function start()&#123;</span><br><span class="line"></span><br><span class="line">    function onRequest(request, response) &#123;</span><br><span class="line"></span><br><span class="line">        var pathname = url.parse(request.url).pathname;</span><br><span class="line"></span><br><span class="line">        console.log(&apos;Request for&apos; + pathname +&apos;received.&apos;)</span><br><span class="line"></span><br><span class="line">        response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line"></span><br><span class="line">        response.write(&quot;Hello World&quot;);</span><br><span class="line"></span><br><span class="line">        response.end();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    http.createServer(onRequest).listen(8080);</span><br><span class="line"></span><br><span class="line">    console.log(&quot;Server has started.&quot;);</span><br><span class="line"></span><br><span class="line">   console.log(&apos;Open http://localhost:8080/ in browser to checkout！&apos;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.start = start;</span><br></pre></td></tr></table></figure><p>启动服务器我们可以看到URL可以被正确解析。</p><p>现在我们开始编写路由，创建一个 router.js 文件,添加路由函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function route(pathname) &#123;</span><br><span class="line"></span><br><span class="line">    return &quot;A request for &quot; + pathname;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.route = route;</span><br></pre></td></tr></table></figure><p>修改start函数将路由函数传递过去：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&quot;http&quot;);</span><br><span class="line"></span><br><span class="line">var url = require(&quot;url&quot;);</span><br><span class="line"></span><br><span class="line">function start(route) &#123;</span><br><span class="line"></span><br><span class="line">    function onRequest(request, response) &#123;</span><br><span class="line"></span><br><span class="line">        var pathname = url.parse(request.url).pathname;</span><br><span class="line"></span><br><span class="line">        console.log(&quot;Request for &quot; + pathname + &quot; received.&quot;);</span><br><span class="line"></span><br><span class="line">        var res=route(pathname);</span><br><span class="line"></span><br><span class="line">        response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line"></span><br><span class="line">        response.write(res);</span><br><span class="line"></span><br><span class="line">        response.end();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    http.createServer(onRequest).listen(8080);</span><br><span class="line"></span><br><span class="line">    console.log(&quot;Server has started.&quot;);</span><br><span class="line"></span><br><span class="line">    console.log(&apos;Open http://localhost:8080/ in browser to checkout！&apos;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.start = start;</span><br></pre></td></tr></table></figure><p>启动服务器，打开<a href="http://localhost:8080/,我们可以看到服务器可以正常使用路由模块了。" target="_blank" rel="noopener">http://localhost:8080/,我们可以看到服务器可以正常使用路由模块了。</a></p><p>接下来我们要扩展路由函数使它可以完成我们的应用需求，我们很自然的想到将处理请求的代码写在路由函数里面，但是如果我们有多个路由需要处理，每个请求处理函数又比较复杂，路由函数就会显得比较臃肿，代码也不利于维护。</p><p>所以我们将请求处理模块与路由模块分离开来，创建requestHandlers.js，并写入以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function start() &#123;</span><br><span class="line"></span><br><span class="line">    console.log(&quot;Request handler &apos;start&apos; was called.&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hello() &#123;</span><br><span class="line"></span><br><span class="line">    console.log(&quot;Request handler &apos;hello&apos; was called.&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.start = start;</span><br><span class="line"></span><br><span class="line">exports.hello = hello;</span><br></pre></td></tr></table></figure><p>修改index.js:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var server = require(&quot;./server&quot;);</span><br><span class="line"></span><br><span class="line">var router = require(&quot;./router&quot;);</span><br><span class="line"></span><br><span class="line">var requestHandlers = require(&quot;./requestHandlers&quot;);</span><br><span class="line"></span><br><span class="line">var handle = &#123;&#125;</span><br><span class="line"></span><br><span class="line">handle[&quot;/&quot;] = requestHandlers.start;</span><br><span class="line"></span><br><span class="line">handle[&quot;/start&quot;] = requestHandlers.start;</span><br><span class="line"></span><br><span class="line">handle[&quot;/hello&quot;] = requestHandlers.hello;</span><br><span class="line"></span><br><span class="line">server.start(router.route, handle);</span><br></pre></td></tr></table></figure><p>我们把handle对象作为额外的参数传递给服务器，为此将server.js修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&quot;http&quot;);</span><br><span class="line"></span><br><span class="line">var url = require(&quot;url&quot;);</span><br><span class="line"></span><br><span class="line">function start(route, handle) &#123;</span><br><span class="line"></span><br><span class="line">    function onRequest(request, response) &#123;</span><br><span class="line"></span><br><span class="line">        var pathname = url.parse(request.url).pathname;</span><br><span class="line"></span><br><span class="line">        console.log(&quot;Request for &quot; + pathname + &quot; received.&quot;);</span><br><span class="line"></span><br><span class="line">        route(handle, pathname);</span><br><span class="line"></span><br><span class="line">        response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line"></span><br><span class="line">        response.write(&quot;Hello World&quot;);</span><br><span class="line"></span><br><span class="line">        response.end();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    http.createServer(onRequest).listen(8888);</span><br><span class="line"></span><br><span class="line">    console.log(&quot;Server has started.&quot;);</span><br><span class="line"></span><br><span class="line">    console.log(&apos;Open http://localhost:8080/ in browser to checkout！&apos;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.start = start;</span><br></pre></td></tr></table></figure><p>这样我们就在start()函数里添加了handle参数，并且把handle对象作为第一个参数传递给了route()回调函数。</p><p>然后我们相应地在route.js文件中修改route()函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function route(handle, pathname) &#123;</span><br><span class="line"></span><br><span class="line">  console.log(&quot;About to route a request for &quot; + pathname);</span><br><span class="line"></span><br><span class="line">  if (ypeof handle\[pathname] === &apos;function&apos;) &#123;</span><br><span class="line"></span><br><span class="line">    hadle\[pathname]();</span><br><span class="line"></span><br><span class="line">  &#125; else &#123;</span><br><span class="line"></span><br><span class="line">    console.log(&quot;No request handler found for &quot; + pathname);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.route = route;</span><br></pre></td></tr></table></figure><p>处理post请求</p><p>为了实现提交一个表单路由跳转并且输出提交信息，我们需要显示一个输入框供用户输入内容，然后通过POST请求提交给服务器。最后，服务器接受到请求，通过处理程序将输入的内容展示到浏览器中。</p><p>/start请求处理程序用于生成带输入框的表单，我们将requestHandlers.js修改为如下形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">function start(response) &#123;</span><br><span class="line"></span><br><span class="line">  console.log(&quot;Request handler &apos;start&apos; was called.&quot;);</span><br><span class="line"></span><br><span class="line">  var body = &apos;&lt;html&gt;&apos;+</span><br><span class="line"></span><br><span class="line">    &apos;&lt;head&gt;&apos;+</span><br><span class="line"></span><br><span class="line">    &apos;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; &apos;+</span><br><span class="line"></span><br><span class="line">    &apos;charset=UTF-8&quot; /&gt;&apos;+</span><br><span class="line"></span><br><span class="line">    &apos;&lt;/head&gt;&apos;+</span><br><span class="line"></span><br><span class="line">    &apos;&lt;body&gt;&apos;+</span><br><span class="line"></span><br><span class="line">    &apos;&lt;form action=&quot;/hello&quot; method=&quot;post&quot;&gt;&apos;+</span><br><span class="line"></span><br><span class="line">    &apos;&lt;textarea name=&quot;text&quot; rows=&quot;1&quot; cols=&quot;10&quot;&gt;&lt;/textarea&gt;&apos;+</span><br><span class="line"></span><br><span class="line">    &apos;&lt;input type=&quot;submit&quot; value=&quot;Submit text&quot; /&gt;&apos;+</span><br><span class="line"></span><br><span class="line">    &apos;&lt;/form&gt;&apos;+</span><br><span class="line"></span><br><span class="line">    &apos;&lt;/body&gt;&apos;+</span><br><span class="line"></span><br><span class="line">    &apos;&lt;/html&gt;&apos;;</span><br><span class="line"></span><br><span class="line">    response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/html&quot;&#125;);</span><br><span class="line"></span><br><span class="line">    response.write(body);</span><br><span class="line"></span><br><span class="line">    response.end();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hello(response) &#123;</span><br><span class="line"></span><br><span class="line">  console.log(&quot;Request handler &apos;hello&apos; was called.&quot;);</span><br><span class="line"></span><br><span class="line">  response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line"></span><br><span class="line">  response.write(&quot;Hello hello&quot;);</span><br><span class="line"></span><br><span class="line">  response.end();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.start = start;</span><br><span class="line"></span><br><span class="line">exports.hello = hello;</span><br></pre></td></tr></table></figure><p>服务器需要获取所有来自表单的数据，然后将数据传递给请求路由和请求处理函数进行进一步的处理。为了使整个过程非阻塞，Node.js会将POST数据拆分成很多小的数据块，然后通过触发特定的事件，将这些小数据块传递给回调函数。这里的特定的事件有data事件（表示新的小数据块到达了）以及end事件（表示所有的数据都已经接收完毕）。我们需要告诉Node.js当这些事件触发的时候，回调哪些函数。</p><p>下面开始修改server.js：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&quot;http&quot;);</span><br><span class="line"></span><br><span class="line">var url = require(&quot;url&quot;);</span><br><span class="line"></span><br><span class="line">function start(route, handle) &#123;</span><br><span class="line"></span><br><span class="line">  function onRequest(request, response) &#123;</span><br><span class="line"></span><br><span class="line">    var postData = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    var pathname = url.parse(request.url).pathname;</span><br><span class="line"></span><br><span class="line">    console.log(&quot;Request for &quot; + pathname + &quot; received.&quot;);</span><br><span class="line"></span><br><span class="line">    request.setEncoding(&quot;utf8&quot;);</span><br><span class="line"></span><br><span class="line">    request.addListener(&quot;data&quot;, function(postDataChunk) &#123;</span><br><span class="line"></span><br><span class="line">      postData += postDataChunk;</span><br><span class="line"></span><br><span class="line">      console.log(&quot;Received POST data chunk &apos;&quot;+</span><br><span class="line"></span><br><span class="line">      postDataChunk + &quot;&apos;.&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    request.addListener(&quot;end&quot;, function() &#123;</span><br><span class="line"></span><br><span class="line">      route(handle, pathname, response, postData);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  http.createServer(onRequest).listen(8080);</span><br><span class="line"></span><br><span class="line">  console.log(&quot;Server has started.&quot;);</span><br><span class="line"></span><br><span class="line">  console.log(&apos;Open http://localhost:8080/ in browser to checkout！&apos;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.start = start;</span><br></pre></td></tr></table></figure><p>我们接下来在/hello页面，展示用户输入的内容。要实现该功能，我们需要将postData传递给请求处理程序，修改router.js为如下形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function route(handle, pathname, response, postData) &#123;</span><br><span class="line"></span><br><span class="line">  console.log(&quot;About to route a request for &quot; + pathname);</span><br><span class="line"></span><br><span class="line">  if (ypeof handle\[pathname] === &apos;function&apos;) &#123;</span><br><span class="line"></span><br><span class="line">    hadle\[pathname](response, postData);</span><br><span class="line"></span><br><span class="line">  &#125; else &#123;</span><br><span class="line"></span><br><span class="line">    console.log(&quot;No request handler found for &quot; + pathname);</span><br><span class="line"></span><br><span class="line">    response.writeHead(404, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line"></span><br><span class="line">    response.write(&quot;404 Not found&quot;);</span><br><span class="line"></span><br><span class="line">    response.end();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.route = route;</span><br></pre></td></tr></table></figure><p>我们现在可以接收POST数据并在请求处理程序中处理该数据了。</p><p>我们最后要做的是： 把POST数据中，我们感兴趣的部分传递给请求路由和请求处理程序。在我们这个例子中，我们感兴趣的其实只是text字段。</p><p>我们可以使用node内置的querystring模块来实现,修改requestHandlers.js:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">var querystring = require(&quot;querystring&quot;);</span><br><span class="line"></span><br><span class="line">function start(response, postData) &#123;</span><br><span class="line"></span><br><span class="line">  console.log(&quot;Request handler &apos;start&apos; was called.&quot;);</span><br><span class="line"></span><br><span class="line">  var body = &apos;&lt;html&gt;&apos;+</span><br><span class="line"></span><br><span class="line">    &apos;&lt;head&gt;&apos;+</span><br><span class="line"></span><br><span class="line">    &apos;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; &apos;+</span><br><span class="line"></span><br><span class="line">    &apos;charset=UTF-8&quot; /&gt;&apos;+</span><br><span class="line"></span><br><span class="line">    &apos;&lt;/head&gt;&apos;+</span><br><span class="line"></span><br><span class="line">    &apos;&lt;body&gt;&apos;+</span><br><span class="line"></span><br><span class="line">    &apos;&lt;form action=&quot;/hello&quot; method=&quot;post&quot;&gt;&apos;+</span><br><span class="line"></span><br><span class="line">    &apos;&lt;textarea name=&quot;text&quot; rows=&quot;1&quot; cols=&quot;10&quot;&gt;&lt;/textarea&gt;&apos;+</span><br><span class="line"></span><br><span class="line">    &apos;&lt;input type=&quot;submit&quot; value=&quot;Submit text&quot; /&gt;&apos;+</span><br><span class="line"></span><br><span class="line">    &apos;&lt;/form&gt;&apos;+</span><br><span class="line"></span><br><span class="line">    &apos;&lt;/body&gt;&apos;+</span><br><span class="line"></span><br><span class="line">    &apos;&lt;/html&gt;&apos;;</span><br><span class="line"></span><br><span class="line">    response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/html&quot;&#125;);</span><br><span class="line"></span><br><span class="line">    response.write(body);</span><br><span class="line"></span><br><span class="line">    response.end();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function hello(response, postData) &#123;</span><br><span class="line"></span><br><span class="line">  console.log(&quot;Request handler &apos;hello&apos; was called.&quot;);</span><br><span class="line"></span><br><span class="line">  response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/plain&quot;&#125;);</span><br><span class="line"></span><br><span class="line">  response.write(&quot;Hello: &quot;+</span><br><span class="line"></span><br><span class="line">  querystring.parse(postData).text);</span><br><span class="line"></span><br><span class="line">  response.end();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.start = start;</span><br><span class="line"></span><br><span class="line">exports.hello = hello;</span><br></pre></td></tr></table></figure><p>启动服务器打开<a href="http://localhost:8080/,输入用户名，页面就会跳转并输出欢迎信息.查看[源码](https://github.com/shengxihu/Exercise/tree/master/node/node-1" target="_blank" rel="noopener">http://localhost:8080/,输入用户名，页面就会跳转并输出欢迎信息.查看[源码](https://github.com/shengxihu/Exercise/tree/master/node/node-1</a>)</p><p>到目前为止，我们已经实现了一个简单的web应用，虽然它很简单，但是我们在编写过程中注重采用了模块化、解耦合的思想，这给了我们继续完善的空间，随着我们对node了解不断加深，我们可以基于它打造出功能更加强大的应用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Build-Your-First-Node-App&quot;&gt;&lt;a href=&quot;#Build-Your-First-Node-App&quot; class=&quot;headerlink&quot; title=&quot;Build Your First Node App&quot;&gt;&lt;/a&gt;Build Your 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Properties in JavaScript/ definition versus assignment</title>
    <link href="http://yoursite.com/2018/02/01/Properties-in-JavaScript-definition-versus-assignment/"/>
    <id>http://yoursite.com/2018/02/01/Properties-in-JavaScript-definition-versus-assignment/</id>
    <published>2018-01-31T16:05:28.000Z</published>
    <updated>2018-03-02T07:28:36.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Properties-in-JavaScript-definition-versus-assignment"><a href="#Properties-in-JavaScript-definition-versus-assignment" class="headerlink" title="Properties in JavaScript/ definition versus assignment"></a>Properties in JavaScript/ definition versus assignment</h1><ol><li><a href="#属性定义和属性赋值">属性定义和属性赋值</a></li><li><a href="#概述：属性特性和内部属性">概述：属性特性和内部属性</a></li></ol><p>原文链接:Properties in JavaScript: definition versus assignment;</p><p>在JavaScript，属性的定义和赋值两个不同的操作，这篇博客致力于解释这两种操作的差异和造成这些差异的原因。</p><h3 id="属性定义和属性赋值"><a href="#属性定义和属性赋值" class="headerlink" title="属性定义和属性赋值"></a><a href="#属性定义和属性赋值" title="属性定义和属性赋值"></a>属性定义和属性赋值</h3><p>1.属性定义：定义属性将会使用一个如下的属性定义函数：、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.defineProperty(obj, propName, propDesc)</span><br></pre></td></tr></table></figure><p>这个函数的主要功能是直接在obj对象上添加一个属性，通过propDesc配置属性特性（例如writable）。<br>这个函数的另一个功能是用来改变一个属性的特性，包括属性的值。</p><p>2.属性赋值：为了给一个属性赋值，使用如下的赋值表达式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.prop = value</span><br></pre></td></tr></table></figure><p>这个表达式的主要功能是改变一个属性的值，为了完成这个操作，JavaScript将会查询obj对象的原型链。如果obj对象或者它的原型链上定义了setter方法，赋值操作将会通过调用这个setter方法来完成。如果被赋值的这个属性在obj对象上不存在，这个赋值操作将会产生另一个结果——在obj对象上定义一个拥有默认特性（writable等）的prop属性。</p><p>接下来的两个部分将会探讨更多关于属性定义和赋值是如何工作的细节。及时你跳过它们，你应该依然能够理解第四部分以及后续段落。</p><h3 id="概述：属性特性和内部属性"><a href="#概述：属性特性和内部属性" class="headerlink" title="概述：属性特性和内部属性"></a><a href="#概述：属性特性和内部属性" title="概述：属性特性和内部属性"></a>概述：属性特性和内部属性</h3><p>在我们解释属性定义和赋值是如何工作之前，让我们快速回顾一下什么事属性特性和内部属性。</p><p>1.属性的种类：</p><p>JavaScript中存在3种属性</p><p>命名访问器属性：一个通过getter或者setter定义的属性。</p><p>命名数据属性：拥有一个确定值得属性，这是最常见的属性，它们有自己的方法。</p><p>内部属性：由JavaScript引擎内部使用的属性，不能通过直接JavaScript代码操作。然而，然而我们可以间接的方式来操作它们。例如，每一个对象都有一个叫做[Prototype]]的内部属性，你不可以直接的读取到它，但是依然可以通过Object.getPrototypeOf()来获取它的值。尽管内部属性通常由双中括号包围的名称来表示，但这并不是它们的名字， 这是一种抽象的表示，它们并没有字符串值表示的属性名。</p><p>2.属性特性：</p><p>每个属性都拥有以下的属性特性，并且被它们所影响。</p><p>所有属性都有的特性：</p><p>[Enumerable]]：如果一个属性是不可枚举的,则在一些操作下,这个属性是不可见的,比如for…in和Object.keys().</p><p>[[Configurable]]: 如果一个属性是不可配置的,则该属性的除了[[Value]]的所有特性都不可改变.</p><p>命名数据特性：</p><p>[[Value]]: 属性的值.</p><p>[[Writable]]:决定属性值是否可变.</p><p>命名访问器属性:</p><p>[[Get]]:拥有getter方法.</p><p>[[Set]]:拥有setter方法.</p><p>3.属性描述符：</p><p>属性操作符可以写成一个包含一系列属性特性的对象。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    value: 123,</span><br><span class="line"></span><br><span class="line">    writable: false</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如你所见，对象的属性名对应着[[Value]]和[[Writable]]这样的属性特性名。属性操作符使用在Object.defineProperty, Object.getOwnPropertyDescriptor, Object.create这样的改变或者返回属性特性的函数中.如果某个属性特性缺失，属性操作符将使用下表对应的默认值.</p><p>属性 默认值<br>value undefined<br>get undefined<br>set undefined<br>writable false<br>enumerable false<br>configurable false</p><p>4.内部属性:</p><p>每个对象都包含如下四个属性在内的一些内部属性：</p><p>[[Prototype]]: 对象的原型.</p><p>[[Extensible]]: 对象是否可扩展，即是否可添加新的属性.</p><p>[[DefineOwnProperty]]: 定义一个属性的内部方法.</p><p>[[Put]]: 为一个属性赋值的内部方法.</p><p>属性定义和属性赋值详解</p><p>1.属性定义</p><p>属性定义是通过如下的内部方法来操作的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[DefineOwnProperty]] (P, Desc, Throw)</span><br></pre></td></tr></table></figure></p><p>p是将要定义的属性名，Desc是属性描述符，Throw明确了如何处理操作异常:如果Throw为true,则抛出异常.否则,操作只会静默失败.当调用[[DefineOwnProperty]]时,会下面的操作步骤执行操作.</p><ul><li><p>如果对象上没有名为P的属性：</p><ul><li><p>如果属性可扩展，创建一个新的属性P.</p></li><li><p>如果对象不可扩展，拒绝操作.</p></li></ul></li><li><p>如果对象上已经有一个名为P的属性:</p><ul><li><p>如果属性可配置,则重新配置属性.</p></li><li><p>如果属性不可配置,如下操作将会被拒绝（不在如下范围内的操作可以进行）:</p><ul><li><p>将一个数据属性转换成访问器属性,反之亦然.</p></li><li><p>改变[[Configurable]]或[[Enumerable]].</p></li><li><p>该变[[Writable]].</p></li><li><p>在[[Writable]]为false时改变[[Value]].</p></li><li><p>改变[[Get]]或[[Set]].</p></li></ul></li></ul></li></ul><p>如果P的属性操作符和和当前属性操作符一致，操作可以进行.</p><p>使用Object.defineProperty和Object.defineProperties这两个函数用来定义属性，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.defineProperty(obj, propName, desc)</span><br></pre></td></tr></table></figure><p>JavaScript引擎内部将会将其转换成如下的方法调用:</p><p>``<br>obj.<a href="propName, desc, true">[DefineOwnProperty]</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2.属性赋值:</span><br><span class="line"></span><br><span class="line">为一个属性赋值操作时JavaScript引擎会调用如下的内部方法:</span><br></pre></td></tr></table></figure></p><p>[[Put]] (P, Value, Throw)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">P 和 Throw 和 [[DefineOwnProperty]]中的对应参数作用相同.[[Put]]方法调用时会按照如下情况执行操作:</span><br><span class="line"></span><br><span class="line">*   如果在原型链上存在一个名为P的只读属性(只读的数据属性或者没有setter的访问器属性),拒绝操作.</span><br><span class="line">    </span><br><span class="line">*   如果在原型链上存在一个名为P的且拥有setter的访问器属性:调用这个setter.</span><br><span class="line">    </span><br><span class="line">*   如果没有名为P的自身属性:</span><br><span class="line">    </span><br><span class="line">    *   如果对象不可扩展：拒绝操作.</span><br><span class="line">        </span><br><span class="line">    *   如果这个对象是可扩展的,就使用下面的操作创建一个新属性:</span><br></pre></td></tr></table></figure></p><p>this.[[DefineOwnProperty]](</p><pre><code>P,{    value: Value,    writable: true,    enumerable: true,    configurable: true},Throw</code></pre><p>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">如果已经存在一个可写的名为P的自身属性.则调用:</span><br></pre></td></tr></table></figure></p><p>this.<a href="P, { value: Value }, Throw">[DefineOwnProperty]</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这会改变P的值，其它特性值保持不变。</span><br><span class="line"></span><br><span class="line">如下赋值操作将会调用[[Put]].</span><br></pre></td></tr></table></figure></p><p>obj.prop = v;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在浏览器引擎内部将其会转换成如下的方法调用:</span><br></pre></td></tr></table></figure></p><p>obj.<a href="&quot;prop&quot;, v, isStrictModeOn">[Put]</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这个赋值操作只会在严格模式下抛出异常，并且[[Put]]方法没有返回值（赋值操作会产生返回值）.</span><br><span class="line"></span><br><span class="line">结论</span><br><span class="line"></span><br><span class="line">这部分我们将会探讨关于属性定义和属性赋值的一些结论.</span><br><span class="line"></span><br><span class="line">1.赋值可能会调用原型链上的setter方法，定义会创建一个自身属性.</span><br><span class="line"></span><br><span class="line">给定一个原型proto上有名为foo访问器属性的对象.</span><br></pre></td></tr></table></figure></p><p>var proto = {</p><pre><code>get foo() {    console.log(&quot;Getter&quot;);    return &quot;a&quot;;},set foo(x) {    console.log(&quot;Setter: &quot;+x);},</code></pre><p>};</p><p>var obj = Object.create(proto);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在对象obj上定义一个名为foo的属性或者为名为foo的属性赋值会有什么区别呢？</span><br><span class="line"></span><br><span class="line">如果是定义操作，你将会创建一个新的属性.在这种条件下的定义操作总会在原型链的第一个object上创建一个新属性.如本例中的obj:</span><br></pre></td></tr></table></figure></p><blockquote><p>Object.defineProperty(obj, “foo”, { value: “b” });</p><p>obj.foo</p></blockquote><p>‘b’</p><blockquote><p>proto.foo</p></blockquote><p>Getter</p><p>‘a’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">如果在obj上进行赋值操作，意味着你的目的是改变某个已经存在的属性的值.这个操作将会由setter方法来完成.下面的结果表明操作的确调用了原型链上的setter方法：</span><br></pre></td></tr></table></figure></p><blockquote><p>obj.foo = “b”;</p></blockquote><p>Setter: b</p><p>‘b’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">你可以通过只定义一个getter方法创建一个只读属性，如下，对象proto2的bar属性就是一个只读属性，它被obj2继承.</span><br></pre></td></tr></table></figure></p><p>“use strict”;</p><p>var proto2 = {</p><pre><code>get bar() {    console.log(&quot;Getter&quot;);    return &quot;a&quot;;},</code></pre><p>};</p><p>var obj2 = Object.create(proto2);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">我们使用严格模式来保证赋值操作可以抛出异常.我们想使用赋值操作来改变被bar属性的值，但是因为bar是read-only属性，操作被禁止.</span><br></pre></td></tr></table></figure></p><blockquote><p>obj2.bar = “b”;</p></blockquote><p>TypeError: obj.bar is read-only<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">但是我们可以在obj2上定义一个新的自身属性来覆盖原型proto上的bar属性:</span><br></pre></td></tr></table></figure></p><blockquote><p>Object.defineProperty(obj2, “bar”, { value: “b” });</p><p>obj2.bar</p></blockquote><p>‘b’</p><blockquote><p>proto2.bar</p></blockquote><p>Getter</p><p>‘a’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2.原型中的只读属性会阻止赋值操作，但不会阻止定义操作.</span><br><span class="line"></span><br><span class="line">原型中的只读属性会阻止通过赋值操作的方式为对象添加一个自身属性，你需要使用定义操作来达到这个目的.这个限制在ECMAScript 5.1中被引入. 下面的示范操作中obj的原型proto上有一个只读属性foo，它展示了如果对象原型上有一个值为a的foo只读属性，则赋值操作obj.foo = “b”不会再对象obj上创建一个自身属性foo.</span><br></pre></td></tr></table></figure></p><pre><code>&quot;use strict&quot;;var proto = Object.defineProperties(    {},    {        foo: {  // attributes of property foo:            value: &quot;a&quot;,            writable: false,  // read-only            configurable: true  // explained later        }    });var obj = Object.create(proto);</code></pre><p>* Assignment. Assignment results in an exception: */</p><pre><code>&gt; obj.foo = &quot;b&quot;;TypeError: obj.foo is read-only</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一个继承属性竟然能够影响在对象自身属性的创建，这真是一个奇怪的表现。然而这也非常合理的，它正是一个只读属性的的特性.</span><br><span class="line"></span><br><span class="line">通过定义的方式,我们可以成功创建一个新的自身属性:</span><br></pre></td></tr></table></figure><blockquote><p>Object.defineProperty(obj, “foo”, { value: “b” });</p><p>obj.foo</p></blockquote><p>‘b’</p><blockquote><p>proto.foo</p></blockquote><p>‘a’<br>``<br>3.赋值操作不会改变原型链上的属性</p><p>给出下面的例子，obj将会从proto上继承foo属性.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var proto = &#123; foo: &quot;a&quot; &#125;;</span><br><span class="line"></span><br><span class="line">var obj = Object.create(proto);</span><br></pre></td></tr></table></figure><p>赋值操作obj.foo不会改变proto.foo,但是会为obj创建一个新的自身属性.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; obj.foo = &quot;b&quot;;</span><br><span class="line"></span><br><span class="line">&apos;b&apos;</span><br><span class="line"></span><br><span class="line">&gt; obj.foo</span><br><span class="line"></span><br><span class="line">&apos;b&apos;</span><br><span class="line"></span><br><span class="line">&gt; proto.foo</span><br><span class="line"></span><br><span class="line">&apos;a&apos;</span><br></pre></td></tr></table></figure><p>这种表现的原因是：原型引用的属性值能够被它所有的后代共享，如果试图在它的后代对象上改变这个属性值，就会在这个后代对象上创建一个新的同名自身属性，这个自身属性不会影响它的原型或这个后代对象的后代. 鉴于此, 只读属性的表现可以概括为: 通过阻止自身属性的创建来阻止属性更改. 然而为什么要重写一个原型属性而不是更改一个属性呢？可能有以下两种运用：</p><p>方法：仅仅允许在原型上直接修改原型对象上定义的方法，防止通过原型后代对方法进行意外修改.</p><p>无方法属性：原型可以提供一个能够提供一个被所有后代共享的值，这个值可以通过后代对象重写但是不能通过后代对象改变.有人认为这是一种反模式，并且他们也不鼓励使用这种技术.因为使用构造器函数来初始化默认值是一种改为简洁的方法.</p><p>4.我们只能通过定义操作来创建一个拥有指定特性的属性</p><p>如果通过赋值操作创建一个自身属性，它将只有默认属性特性.如果你想指定属性特性，你只能使用定义操作，这包括定义getter和setter方法.</p><p>5.对象字面量方法添加的属性实质是通过定义操作来完成的.</p><p>例如下面的对象字面量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line"></span><br><span class="line">    foo: 123</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用对象字面量添加的属性在浏览器内部可能被转化为一系列的声明，有两种实现：</p><p>第一种转化为赋值操作来实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var obj = new Object();</span><br><span class="line"></span><br><span class="line">obj.foo = 123;</span><br></pre></td></tr></table></figure><p>第二种是转化为定义操作来实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var obj = new Object();</span><br><span class="line"></span><br><span class="line">Object.defineProperties(obj, &#123;</span><br><span class="line"></span><br><span class="line">    foo: &#123;</span><br><span class="line"></span><br><span class="line">        value: 123,</span><br><span class="line"></span><br><span class="line">        enumerable: true,</span><br><span class="line"></span><br><span class="line">        configurable: true,</span><br><span class="line"></span><br><span class="line">        writable: true</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>第二种实现更好的表现了对象字面量的语义：创建新的属性.同样，Object.create方法通过第二个参数接受一个属性描述符.</p><p>6.作为方法的对象属性</p><p>方法属性的一种实现如下:</p><p>``<br>“use strict”;</p><p>function Stack() {</p><p>}</p><p>Object.defineProperties(Stack.prototype, {</p><pre><code>push: {    writable: false,    configurable: true,                value: function (x) { /* ... */ }}</code></pre><p>});<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这么做的目的是防止对方法属性进行意外赋值:</span><br></pre></td></tr></table></figure></p><blockquote><p>var s = new Stack();</p><p>s.push = 5;</p></blockquote><p>TypeError: s.push is read-only<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">然而，正因为push是可配置的，我们可以通过属性定义来覆盖这个方法.</span><br></pre></td></tr></table></figure></p><blockquote><p>var s = new Stack();</p><p>Object.defineProperty(s, “push”,</p></blockquote><pre><code>{ value: function () { return &quot;yes&quot; }})</code></pre><blockquote><p>s.push()</p></blockquote><p>‘yes’<br>```</p><p>我们甚至可以通过定义操作来重写Stack.prototype.push方法.</p><p>结论</p><p>属性赋值经常被用来为一个对象添加一个新的属性,这篇文字解释了这种做法可能带来的问题. 因此，我们最好遵循以下的规则:</p><p>1.使用定义操作来创建新的属性.</p><p>2.使用赋值操作来改变属性的值.</p><p>在评论中,medikoo提醒了我们使用属性描述符来创建属性可能会有点慢，因此他经常通过为属性赋值来创建新属性,因为这样很方便.值得高兴的是,ECMAScript.next也许会把属性的定义操作变的既快又方便:已经存在一个“定义属性的运算符”的提案,可以作为Object.defineProperties的替代用法.由于属性定义和属性赋值之间存在微妙但是至关重要的差别,这种改进应该会很受欢迎.</p><p>参考资料：</p><p>1.<a href="http://www.2ality.com/2011/06/prototypes-as-classes.html" target="_blank" rel="noopener">Prototypes as classes – an introduction to JavaScript inheritance</a>;</p><p>2.<a href="http://www.2ality.com/2011/07/js-properties.html" target="_blank" rel="noopener">JavaScript properties: inheritance and enumerability</a>;</p><p>3.<a href="http://wiki.ecmascript.org/doku.php?id=strawman:fixing_override_mistake" target="_blank" rel="noopener">Fixing the Read-only Override Prohibition Mistake [ECMAScript wiki]</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Properties-in-JavaScript-definition-versus-assignment&quot;&gt;&lt;a href=&quot;#Properties-in-JavaScript-definition-versus-assignment&quot; class=&quot;heade
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript-Modules</title>
    <link href="http://yoursite.com/2018/02/01/JavaScript-Modules/"/>
    <id>http://yoursite.com/2018/02/01/JavaScript-Modules/</id>
    <published>2018-01-31T16:04:05.000Z</published>
    <updated>2018-03-02T07:16:50.084Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-Modules"><a href="#JavaScript-Modules" class="headerlink" title="JavaScript-Modules"></a>JavaScript-Modules</h1><ol><li><a href="#模块化">模块化</a></li><li><a href="#为什么要进行模块化">为什么要进行模块化</a></li><li><a href="#JS模块化的发展过程（从function，IIFE到Commonjs）">JS模块化的发展过程（从function，IIFE到Commonjs）</a><ol><li><a href="#Function">Function</a></li><li><a href="#IIFE">IIFE</a></li></ol></li><li><a href="#放大模式">放大模式</a></li><li><a href="#宽放大模式（Loose-augmentation）">宽放大模式（Loose augmentation）</a></li><li><a href="#紧扩充模式">紧扩充模式</a></li><li><a href="#输入全局变量">输入全局变量</a></li><li><a href="#Commonjs">Commonjs</a></li><li><a href="#在浏览器中使用-CommonJS">在浏览器中使用 CommonJS</a></li><li><a href="#AMD">AMD</a></li><li><a href="#总结：">总结：</a><ol><li><a href="#模块接口的设设计原则：">模块接口的设设计原则：</a></li></ol></li><li><a href="#ECMAScript-6-Modules">ECMAScript 6 Modules</a><ol><li><a href="#export-multiply">export multiply;</a></li><li><a href="#import">import:</a></li></ol></li></ol><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a><a href="#模块化" title="模块化"></a>模块化</h3><p>当我们称一个应用程序是模块化的的时候，我们通常是指它由一组高度解耦的、存放在不同模块中的独特功能构成。你可能已经知道，松散耦合通过尽可能地去除依赖性来让可维护性更加简单易得。当这一点被有效实现的时候，系统中某一部分的变化将如何影响其它部分就会变得显而易见。</p><p>JavaScript模块化是将JS代码按照功能的不同分成高度解耦的代码块，存放在模块中。与一些更传统的编程语言不同的是，JavaScript 6以前的版本并没有为开发者们提供以一种简洁、有条理地的方式来引入模块的方法。</p><h3 id="为什么要进行模块化"><a href="#为什么要进行模块化" class="headerlink" title="为什么要进行模块化"></a><a href="#为什么要进行模块化" title="为什么要进行模块化"></a>为什么要进行模块化</h3><p>1.解决命名冲突问题<br>在传统的JavaScript语言中，位于全局作用域中的变量可以在任何地方被访问，然而随着网站逐渐变成”互联网应用程序”，嵌入网页的Javascript代码越来越庞大，越来越复杂。JS这种共享全局作用域的做法慢慢显现出可能带来命名冲突的弊端。</p><p>2.代码复用<br>在一个大型的互联网应用程序中，很多不同功能会用到相同的代码，在这样的情况下，如果不使用模块化，我们的解决方案将是复制这段代码，然后粘贴到需要这段代码的地方。如果我们的这段代码出现了错误或者我们想要修改这段代码，必须找到所有使用这段代码的地方逐一修改。然而一旦我们引入了模块思想，这种问题就会迎刃而解。我们只需要将这段代码封装成一个模块，在需要使用它的地方引入这个模块，并且只用在模块中修改。<br>代码复用的另一个方面是指你的代码也可以被别人使用，或者你也可以使用别人的代码。理想情况下，开发者只需要实现核心的业务逻辑，其他都可以加载别人已经写好的模块。</p><p>3.去耦合<br>模块化的一个很明显的，它可以将一段有特定功能的代码独立出来。这样可以一定程度上减小代码之间的耦合性，当一个页面应用需要的某些功能需要更新时，只要更新相关的模块就可以了，这些改动不会对其他的模块带来影响。同样，一个程序中的某一个模块的改动也不会影响这个模块的主要功能。</p><p>4.保持模块内部的私有性<br>模块化需要给模块定义一个接口，主程序或者其它模块通过这个接口来调用模块，模块的接口是对外开放的，但是模块内部的代码不能被模块外部访问。这就保证了模块内部变量的私有性。</p><h3 id="JS模块化的发展过程（从function，IIFE到Commonjs）"><a href="#JS模块化的发展过程（从function，IIFE到Commonjs）" class="headerlink" title="JS模块化的发展过程（从function，IIFE到Commonjs）"></a><a href="#JS模块化的发展过程（从function，IIFE到Commonjs）" title="JS模块化的发展过程（从function，IIFE到Commonjs）"></a>JS模块化的发展过程（从function，IIFE到Commonjs）</h3><p>虽然Javascript模块化编程，已经成为一个迫切的需求。但是，ECMAScript标准第六版出现之前，Javascript不是一种模块化编程语言，它不支持”类”（class），更遑论”模块”（module）了。（ECMAScript标准第六版，正式支持”类”和”模块”，但还需要很长时间才能投入实用。）</p><p>Javascript社区做了很多努力，在现有的运行环境中，实现”模块”的效果。这一部分将总结当前＂Javascript模块化编程＂的最佳实践。</p><h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a><a href="#Function" title="Function"></a>Function</h4><p>模块就是实现特定功能的一组方法。</p><p>只要把不同的函数（以及记录状态的变量）简单地放在一起，就算是一个模块。</p><p>函数是JavaScript中唯一可以创建新的作用域的类型，我们可以利用函数来为模块创建作用域。<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var dayName=function()&#123;</span><br><span class="line"></span><br><span class="line">    var names=\[&quot;Sunday&quot;,&quot;Monday&quot;,&quot;Tuesday&quot;,&quot;Wedensday&quot;,&quot;Thursday&quot;,&quot;Friday&quot;,&quot;Saturday&quot;\];</span><br><span class="line"></span><br><span class="line">    return function(number)&#123;</span><br><span class="line"></span><br><span class="line">        return names\[number\];</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">console.log(dayName(1));</span><br></pre></td></tr></table></figure><p>这个例子通过将一个匿名函数的返回值赋给一个变量（dayName），返回值也是一个函数，也是这个模块想暴露到模块外的部分，这样变量dayName函数就变成了模块的接口。</p><p>现在假如我们需要在这个模块中再加入一个函数，并且想把这个函数也作为模块接口，此时我们需要返回两个函数，解决方案是将两个函数封装在一个对象中，然后返回这个对象作为模块的接口。<br>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var weekDay = function() &#123;</span><br><span class="line"></span><br><span class="line">        var names = \[&quot;Sunday&quot;,&quot;Monday&quot;,&quot;Tuesday&quot;,&quot;Wednesday&quot;,&quot;Thursday&quot;,&quot;Friday&quot;,&quot;Saturday&quot;\];</span><br><span class="line"></span><br><span class="line">        return &#123;</span><br><span class="line"></span><br><span class="line">            name: function(number)&#123;</span><br><span class="line"></span><br><span class="line">                return names\[number\];</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            number: function(name)&#123;</span><br><span class="line"></span><br><span class="line">                return names.indexOf(name);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;();</span><br><span class="line"></span><br><span class="line">console.log(weekDay.number(&quot;Sunday&quot;));</span><br></pre></td></tr></table></figure><p>但是这种做法的一个很明显显的缺点是当返回部分很大时return语句要包裹很多代码，我们可以使用一个立即执行函数来解决这个问题。下面将对此进行介绍。</p><h4 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a><a href="#IIFE" title="IIFE"></a>IIFE</h4><p>JavaScript语法有一个怪癖，如果一个函数以function开始，它将会是一个函数声明，函数声明必须有一个函数名。而如果一个函数不以function开始，它将是一个函数表达式。我们可以使用一个括号强制将函数转换为<br>函数表达式。</p><p>上面的函数可以改写成如下形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(function(exports)&#123;</span><br><span class="line"></span><br><span class="line">    var names = \[&quot;Sunday&quot;,&quot;Monday&quot;,&quot;Tuesday&quot;,&quot;Wednesday&quot;,&quot;Thursday&quot;,&quot;Friday&quot;,&quot;Saturday&quot;\];</span><br><span class="line"></span><br><span class="line">    exports.name = function(number) &#123;</span><br><span class="line"></span><br><span class="line">        return names\[number\];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    exports.number = function(name) &#123;</span><br><span class="line"></span><br><span class="line">        return names.indexOf\[name\];</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;)(this.weekDay = &#123;&#125;);</span><br><span class="line"></span><br><span class="line">console.log(weekDay.name(1));</span><br></pre></td></tr></table></figure><p>上面的代码块中，我们使用一个对象作为函数的参数，将要输出的接口作为对象的属性，这样我们就可以使用这个对象调用接口。</p><h3 id="放大模式"><a href="#放大模式" class="headerlink" title="放大模式"></a><a href="#放大模式" title="放大模式"></a>放大模式</h3><p>如果一个模块很大，必须分成几个部分，或者一个模块需要继承另一个模块，这时就有必要采用”放大模式”（augmentation）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">　　var module1 = (function (mod)&#123;</span><br><span class="line"></span><br><span class="line">　　　　mod.m3 = function () &#123;</span><br><span class="line"></span><br><span class="line">　　　　　　//...</span><br><span class="line"></span><br><span class="line">　　　　&#125;;</span><br><span class="line"></span><br><span class="line">　　　　return mod;</span><br><span class="line"></span><br><span class="line">　　&#125;)(module1);</span><br></pre></td></tr></table></figure><h3 id="宽放大模式（Loose-augmentation）"><a href="#宽放大模式（Loose-augmentation）" class="headerlink" title="宽放大模式（Loose augmentation）"></a><a href="#宽放大模式（Loose-augmentation）" title="宽放大模式（Loose augmentation）"></a>宽放大模式（Loose augmentation）</h3><p>在浏览器环境中，模块的各个部分通常都是从网上获取的，有时无法知道哪个部分会先加载。如果采用上一节的写法，第一个执行的部分有可能加载一个不存在空对象，这时就要采用”宽放大模式”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">　　var module1 = ( function (mod)&#123;</span><br><span class="line"></span><br><span class="line">　　　　//...</span><br><span class="line"></span><br><span class="line">　　　　return mod;</span><br><span class="line"></span><br><span class="line">　　&#125;)(window.module1 || &#123;&#125;);</span><br></pre></td></tr></table></figure><p>与”放大模式”相比，＂宽放大模式＂就是”立即执行函数”的参数可以是空对象。</p><p>上面的代码为module1模块添加了一个新方法m3()，然后返回新的module1模块。</p><h3 id="紧扩充模式"><a href="#紧扩充模式" class="headerlink" title="紧扩充模式"></a><a href="#紧扩充模式" title="紧扩充模式"></a>紧扩充模式</h3><p>宽放大模式非常棒，但是有一个缺点是对无法安全地处理方法属性的重载。紧扩充模式保持对旧有方法的的引用，在定义的新方法中可以灵活地重用旧有方法的功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var MODULE = (function (my) &#123;</span><br><span class="line"></span><br><span class="line">    var old_moduleMethod = my.moduleMethod;</span><br><span class="line"></span><br><span class="line">    my.moduleMethod = function () &#123;</span><br><span class="line"></span><br><span class="line">        // method override, has access to old through old_moduleMethod...</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    return my;</span><br><span class="line"></span><br><span class="line">&#125;(MODULE));</span><br></pre></td></tr></table></figure><h3 id="输入全局变量"><a href="#输入全局变量" class="headerlink" title="输入全局变量"></a><a href="#输入全局变量" title="输入全局变量"></a>输入全局变量</h3><p>独立性是模块的重要特点，模块内部最好不与程序的其他部分直接交互。<br>为了在模块内部调用全局变量，必须显式地将其他变量输入模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　var module1 = (function ($) &#123;</span><br><span class="line"></span><br><span class="line">　　　　//...</span><br><span class="line"></span><br><span class="line">　　&#125;)(jQuery);</span><br></pre></td></tr></table></figure><p>但是上面的这种做法依然有不足之处，我们在使用这种方式定义的模块时，依然要通过全局作用域来访问模块，并且模块之间的依赖关系也不够明显。</p><p>并且这种模式需要通过script标签将模块文件插入到文档中，被依赖的模块必须放在依赖它的模块之前，如果模块之间的依赖很复杂，那就悲剧了。为此，社区产生了下面更好的解决方法。</p><h3 id="Commonjs"><a href="#Commonjs" class="headerlink" title="Commonjs"></a><a href="#Commonjs" title="Commonjs"></a>Commonjs</h3><p>上面介绍JavaScript中如何现实模块化的一些常见的模式，但是仅仅有这些模式是不够的，对于整个生态圈来说，JS 模块化缺失带来的一个严重问题是各社区开发一套组件都需要实现自己的模块化机制，不同社区重复制造轮子，导致组件与组件无法兼容、相互割裂，严重阻碍生态系统的发展，模块化规范的制定和遵守更加重要。</p><p>为此， Mozilla 工程师 Kevin Dangoor 在 2009 年 1 月发起了 ServerJS，目标是为非浏览器（比如服务端、本地桌面应用、命令行应用）构建 JavaScript 生态系统，同年 8 月改名为 CommonJS，其目标也扩展到浏览器。CommonJS 的规范包括模块(Modules)、包(Package)、Promises 等多个方面，详情可查阅 CommonJS Wiki。CommonJS 规范有很多的实现，其中最著名的实现就是 Node.js，接下来就以它作为例子介绍 CommonJS 的模块规范。</p><p>从结构的角度来看，一个CJS模块是一段可重用的JavaScript，它导出一系列特定的对象给依赖它的代码调用。</p><p>简单来说来看，一个CJS模块主要包含两个部分：一个名叫exports的自由变量，它包含模块希望提供给其它模块的对象；以及一个 require 函数，让模块用来导入其它模块的导出。</p><p>下面通过一个简单的例子来理解exports和require：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// package/lib 是我们须的一个依赖项</span><br><span class="line"></span><br><span class="line">var lib = require(&apos;package/lib&apos;);</span><br><span class="line"></span><br><span class="line">// 我们的模块的一些行为</span><br><span class="line"></span><br><span class="line">function foo()&#123;</span><br><span class="line"></span><br><span class="line">    lib.log(&apos;hello world!&apos;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 把 foo 导出（暴露）给其它模块</span><br><span class="line"></span><br><span class="line">exports.foo = foo;</span><br></pre></td></tr></table></figure><p>exports 的基本用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 定义我们希望暴露的更多行为</span><br><span class="line"></span><br><span class="line">function foobar()&#123;</span><br><span class="line"></span><br><span class="line">        this.foo = function()&#123;</span><br><span class="line"></span><br><span class="line">                console.log(&apos;Hello foo&apos;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        this.bar = function()&#123;</span><br><span class="line"></span><br><span class="line">                console.log(&apos;Hello bar&apos;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 把 foobar 暴露给其它模块</span><br><span class="line"></span><br><span class="line">exports.foobar = foobar;</span><br></pre></td></tr></table></figure><p>require 的基本用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 一个使用了 &apos;foobar&apos; 的应用</span><br><span class="line"></span><br><span class="line">// 相对于使用文件与模块文件所在的同一目录路径获取模块</span><br><span class="line"></span><br><span class="line">var foobar = require(&apos;./foobar&apos;).foobar,</span><br><span class="line"></span><br><span class="line">    test = new foobar();</span><br><span class="line"></span><br><span class="line">test.bar(); // &apos;Hello bar&apos;</span><br></pre></td></tr></table></figure><h3 id="在浏览器中使用-CommonJS"><a href="#在浏览器中使用-CommonJS" class="headerlink" title="在浏览器中使用 CommonJS"></a><a href="#在浏览器中使用-CommonJS" title="在浏览器中使用 CommonJS"></a>在浏览器中使用 CommonJS</h3><p>浏览器并不不兼容CommonJS，要想在浏览器中加载 CommonJS ，我们需要使用模块加载器：Browserify 是目前最常用的 CommonJS 模块加载器。</p><p>但是有些开发者觉得 CommonJS 更适合于服务器端开发，因为很多处理面向服务器端特性的 CommonJS API 根本无法用 JavaScript 在浏览器级别实现。并且，CommonJS 则采用了服务器优先的策略，采取同步行为、服务器端的资源可以保存在服务器本地的硬盘里面，从硬盘里读取资源的速度是很快的。但是当把这种模式运用到浏览器端之后，浏览器必须从web上下载需要的资源，而下载的速度会受到网速的限制，所以一旦我们所需加载的资源较多，或者用户的网速较慢，就会造成浏览器加载全部资源以前处于假死状态，严重影响我们的用户体验。</p><p>所以，浏览器端的模块，不能采用”同步加载”（synchronous），最好采用”异步加载”（asynchronous）。AMD应运而生。</p><h3 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a><a href="#AMD" title="AMD"></a>AMD</h3><p>AMD是”Asynchronous Module Definition”的缩写，意思就是”异步模块定义”。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p><p>AMD帮助消除对全局变量的需求。 每个模块都通过局部变量引用或者返回对象来定义其依赖模块以及输出功能。因此，模块不需要引入全局变量就能够定义其功能并实现与其他模块的交互。AMD同时是“匿名的”，意味着模块不需要硬编码指向其路径的引用， 模块名仅依赖其文件名和目录路径。</p><p>这里你须要先对下面这两个重要的概念有一定的了解：一个用来进行模块定义的 define 方法以及一个用来处理依赖项加载的 require 方法。define 根据如下的方法定义具名或匿名的模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">define(</span><br><span class="line"></span><br><span class="line">    module_id /*可选*/,</span><br><span class="line"></span><br><span class="line">    \[dependencies\] /*可选*/,</span><br><span class="line"></span><br><span class="line">    definition function /*用来初始化模块或对象的函数*/</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>正如上面展示的，define函数接受三个参数，第一个参数是模块名，可选。第二个参数定义了模块的依赖项，可选。第三个参数是一个初始化模块的函数，是必须的。<br>下面通过一个具体的例子来了解如何使用define定义一个模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">define(&apos;myModule&apos;,</span><br><span class="line"></span><br><span class="line">    \[&apos;foo&apos;, &apos;bar&apos;\],</span><br><span class="line"></span><br><span class="line">    function ( foo, bar ) &#123;</span><br><span class="line"></span><br><span class="line">        // 在这里创建模块</span><br><span class="line"></span><br><span class="line">        var myModule = &#123;</span><br><span class="line"></span><br><span class="line">            //这里可以使用foo模块和bar模块</span><br><span class="line"></span><br><span class="line">            doSomething:function()&#123;</span><br><span class="line"></span><br><span class="line">                console.log(&apos;Hello world!&apos;);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return myModule;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>AMD也采用require()语句加载模块，但是不同于CommonJS，它要求两个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　require(\[module\], callback);</span><br></pre></td></tr></table></figure><p>第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数callback，则是加载成功之后的回调函数。如果将前面的代码改写成AMD形式，就是下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　require(\[&apos;foobar&apos;\], function (foobar) &#123;</span><br><span class="line"></span><br><span class="line">　　　　foobar.bar(); // &apos;Hello bar&apos;</span><br><span class="line"></span><br><span class="line">　　&#125;);</span><br></pre></td></tr></table></figure><p>AMD模块也不能在浏览器中直接加载，同样可以使用模块加载器来完成。webpack可以用来加载AMD模块。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><a href="#总结：" title="总结："></a>总结：</h3><h4 id="模块接口的设设计原则："><a href="#模块接口的设设计原则：" class="headerlink" title="模块接口的设设计原则："></a><a href="#模块接口的设设计原则：" title="模块接口的设设计原则："></a>模块接口的设设计原则：</h4><p>为一个模块设计一个接口是一个非常精妙的工作，接口设计可以采用多种方法，但是我们在设计接口时一定要有远见性，要考虑到以后的使用。为此，模块接口的设计必须遵循以下原则：</p><p>可预见原则：一个网页应用可能是由多个开发人员参与开发的，其他的开发人员可能要使用你的接口，为了不让他花费太多精力查看你的接口的使用方式，你应该尽量保持接口的可预测性。</p><p>可共用原则：一个模块有时不仅仅只用到一个程序中，模块的一大优点就是可以进行代码复用。所以我们要尽量让我们的模块内部的数据结构和实现方法简单明了，让我们的接口可以被不同的模块使用。</p><p>层次接口原则：一个模块应该提供不同层次的接口，如果我们要写一个复杂的程序，这个程序面向不同层次的使用者，我们应该给不同层次的使用者提供不同层次的使用接口。</p><h3 id="ECMAScript-6-Modules"><a href="#ECMAScript-6-Modules" class="headerlink" title="ECMAScript 6 Modules"></a><a href="#ECMAScript-6-Modules" title="ECMAScript 6 Modules"></a>ECMAScript 6 Modules</h3><p>令人振奋的消息是 2015 年 6 月正式发布的 ECMAScript 6 包含了模块规范，采用申明式的语法，使用 import、export 这两个关键字，同时照顾到 Common.JS 社区和 AMD 社区的使用习惯，方便地实现模块的定义和导入。</p><p>新的标准规定使用两个关键字：</p><p>export： 声明了某个模块的本地绑定是外部可见的，这样其它模块就能够读取它们但却无法进行修改。有趣的是，模块可以导出子模块，却无法导出已经在别处定义过的模块。你同样可以给导出重命名来让它们不同于本地的名字。</p><p>import：声明把某个模块的导出绑定为本地变量，并可以重命名来避免命名冲突。</p><p>下面来分别讲解：</p><p>export：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// export data</span><br><span class="line"></span><br><span class="line">export var color = &quot;red&quot;;</span><br><span class="line"></span><br><span class="line">export let name = &quot;Nicholas&quot;;</span><br><span class="line"></span><br><span class="line">export const magicNumber = 7;</span><br><span class="line"></span><br><span class="line">// export function</span><br><span class="line"></span><br><span class="line">export function sum(num1, num2) &#123;</span><br><span class="line"></span><br><span class="line">    return num1 + num1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// export class</span><br><span class="line"></span><br><span class="line">export class Rectangle &#123;</span><br><span class="line"></span><br><span class="line">    constructor(length, width) &#123;</span><br><span class="line"></span><br><span class="line">        this.length = length;</span><br><span class="line"></span><br><span class="line">        this.width = width;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// this function is private to the module</span><br><span class="line"></span><br><span class="line">function subtract(num1, num2) &#123;</span><br><span class="line"></span><br><span class="line">    return num1 - num2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// define a function</span><br><span class="line"></span><br><span class="line">function multiply(num1, num2) &#123;</span><br><span class="line"></span><br><span class="line">    return num1 * num2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// export later</span><br></pre></td></tr></table></figure><h4 id="export-multiply"><a href="#export-multiply" class="headerlink" title="export multiply;"></a><a href="#export-multiply" title="export multiply;"></a>export multiply;</h4><p>我们只需在在原JS的声明前加上export关键字就可以导出数据、类、函数。也可以先定义后导出。而模块中未加export关键字的数据、类和函数都将为模块所私有。</p><p>但是需要注意的是该关键字只能在顶级作用域中使用，类似下面的用法是明显的语法错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (flag) &#123;</span><br><span class="line"></span><br><span class="line">    export flag;    // syntax error</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="import"><a href="#import" class="headerlink" title="import:"></a><a href="#import" title="import:"></a>import:</h4><p>一旦我们把一个模块导出，这个模块就可以使用关键字import导入，语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; identifier1, identifier2 &#125; from &quot;module&quot;;</span><br></pre></td></tr></table></figure><p>identifier1, identifier2是要导入的模块，module是被导入的模块的来源。</p><p>identifiers的具体写法还没有确定下来，可能要等到浏览器和node.js开始原生的使用模块时才会确定identifiers的具体格式。</p><p>可以使用import关键字从一个文件中导入多个模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; module1, module2 \[,module3,...\]&#125; from &quot;example&quot;;</span><br></pre></td></tr></table></figure><p>如果要从一个文件中导入所有的模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import * as example from &quot;example&quot;;</span><br></pre></td></tr></table></figure><p>源文件中的所有模块都被导入，并且被命名为example，源文件中所有的模块都变成example的属性，调用方式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// import everything</span><br><span class="line"></span><br><span class="line">import * as example from &quot;example&quot;;</span><br><span class="line"></span><br><span class="line">console.log(example.sum(1,</span><br><span class="line"></span><br><span class="line">        example.magicNumber));          // 8</span><br><span class="line"></span><br><span class="line">console.log(example.multiply(1, 2));    // 2</span><br></pre></td></tr></table></figure><p>被导入的模块还可以重命名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; add as sum &#125; from &quot;example&quot;;</span><br><span class="line"></span><br><span class="line">console.log(typeof add);            // &quot;undefined&quot;</span><br><span class="line"></span><br><span class="line">console.log(sum(1, 2));             // 3</span><br></pre></td></tr></table></figure><p>从一个模块中导入一个标示符后，这个标示符将表现的和使用const关键字定义的标示符一样，不能被重新赋值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; sum &#125; from &quot;example&quot;;</span><br><span class="line"></span><br><span class="line">console.log(sum(1, 2));     // 3</span><br><span class="line"></span><br><span class="line">sum = 1;        // error</span><br></pre></td></tr></table></figure><p>每一个模块都可以且仅可以定义一个默认值，语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//默认值可以是函数、变量或者类，这里以函数为例</span><br><span class="line"></span><br><span class="line">export default function(num1, num2) &#123;</span><br><span class="line"></span><br><span class="line">    return num1 + num2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入时的语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// import the default</span><br><span class="line"></span><br><span class="line">import sum from &quot;example&quot;;</span><br><span class="line"></span><br><span class="line">console.log(sum(1, 2));     // 3</span><br></pre></td></tr></table></figure></p><p>或者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; default as sum&#125; from &quot;example&quot;;</span><br><span class="line"></span><br><span class="line">console.log(sum(1, 2));     // 3</span><br></pre></td></tr></table></figure><p>再次导出：</p><p>我们可以把已经导入的模块再次导出，并且可以在此过程中进行重命名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &#123; sum &#125; from &quot;example&quot;;</span><br><span class="line"></span><br><span class="line">export &#123; sum &#125;</span><br><span class="line"></span><br><span class="line">//or</span><br><span class="line"></span><br><span class="line">export &#123; sum as add &#125; from &quot;example&quot;;</span><br><span class="line"></span><br><span class="line">//export everything from another module</span><br><span class="line"></span><br><span class="line">export * from &quot;example&quot;;</span><br></pre></td></tr></table></figure><p>需要注意的是，import关键字会将导入的变量、函数和类绑定到本地，你依然可以在本地通过导入的模块去修改它们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">export var name = &quot;Nicholas&quot;;</span><br><span class="line"></span><br><span class="line">export function setName(newName) &#123;</span><br><span class="line"></span><br><span class="line">    name = newName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">import &#123; name, setName &#125; from &quot;example&quot;;</span><br><span class="line"></span><br><span class="line">console.log(name);       // &quot;Nicholas&quot;</span><br><span class="line"></span><br><span class="line">setName(&quot;Greg&quot;);</span><br><span class="line"></span><br><span class="line">console.log(name);       // &quot;Greg&quot;</span><br></pre></td></tr></table></figure><p>参考资料：</p><p>1.<a href="https://www.safaribooksonline.com/library/view/eloquent-javascript-2nd/9781457189821/ch10.html" target="_blank" rel="noopener">Eloquent JavaScript-Chapter 10. Modules</a></p><p>2.<a href="https://leanpub.com/understandinges6/read/#leanpub-auto-modules" target="_blank" rel="noopener">Understanding ECMAScript 6-Modules</a></p><p>3.<a href="http://justineo.github.io/singles/writing-modular-js/" target="_blank" rel="noopener">使用 AMD、CommonJS 及 ES Harmony 编写模块化的 JavaScript</a></p><p>4.<a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html" target="_blank" rel="noopener">Javascript模块化编程（一）：模块的写法</a></p><p>5.<a href="http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html" target="_blank" rel="noopener">Javascript模块化编程（二）：模块的写法</a></p><p>6.<a href="http://www.ruanyifeng.com/blog/2012/11/require_js.html" target="_blank" rel="noopener">Javascript模块化编程（三）：模块的写法</a></p><p>7.<a href="http://lishaopeng.com/2016/02/05/js-module/" target="_blank" rel="noopener">后端程序员的 JavaScript 之旅 - 模块化（一） | 简书</a></p><p>8.<a href="http://lishaopeng.com/2016/02/11/js-module2/" target="_blank" rel="noopener">后端程序员的 JavaScript 之旅 - 模块化（二） | 简书</a></p><p>9.<a href="http://lishaopeng.com/2016/02/19/js-module3/" target="_blank" rel="noopener">后端程序员的 JavaScript 之旅 - 模块化（三） | 简书</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript-Modules&quot;&gt;&lt;a href=&quot;#JavaScript-Modules&quot; class=&quot;headerlink&quot; title=&quot;JavaScript-Modules&quot;&gt;&lt;/a&gt;JavaScript-Modules&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript Scope</title>
    <link href="http://yoursite.com/2018/02/01/JavaScript-Scope/"/>
    <id>http://yoursite.com/2018/02/01/JavaScript-Scope/</id>
    <published>2018-01-31T16:02:55.000Z</published>
    <updated>2018-03-02T07:18:52.611Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-Scope"><a href="#JavaScript-Scope" class="headerlink" title="JavaScript Scope"></a>JavaScript Scope</h1><ol><li><a href="#构造块作用域：">构造块作用域：</a></li><li><a href="#let">let</a></li><li><a href="#const">const</a></li><li><a href="#提升">提升</a><ol><li><a href="#变量提升">变量提升</a></li></ol></li></ol><ul><li><a href="#函数优先">函数优先</a></li><li><a href="#闭包">闭包</a></li><li><a href="#块作用域与闭包">块作用域与闭包</a></li><li><a href="#使用IIFE来创建块作用域">使用IIFE来创建块作用域</a></li><li><a href="#模块">模块</a></li></ul><h3 id="构造块作用域："><a href="#构造块作用域：" class="headerlink" title="构造块作用域："></a><a href="#构造块作用域：" title="构造块作用域："></a>构造块作用域：</h3><h3 id="let"><a href="#let" class="headerlink" title="let"></a><a href="#let" title="let"></a>let</h3><p>let创建块作用域的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if(i)&#123;</span><br><span class="line"></span><br><span class="line">    let bar=i\*2; /\*let会将bar绑定在&#123;......&#125;之间*/</span><br><span class="line"></span><br><span class="line">    bar =something(bar);</span><br><span class="line"></span><br><span class="line">    console.log(bar);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 并且let声明的变量不会被提升 --&gt;</span><br></pre></td></tr></table></figure><h3 id="const"><a href="#const" class="headerlink" title="const"></a><a href="#const" title="const"></a>const</h3><p>const创建块作用域的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if(i)&#123;</span><br><span class="line"></span><br><span class="line">    const bar=2; /\*let会将bar绑定在&#123;......&#125;之间\*/</span><br><span class="line"></span><br><span class="line">    console.log(bar);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&lt;!-- const创建的作用变量为常量，不能被修改,并且let声明的变量不会被提升 –&gt;</p><h3 id="提升"><a href="#提升" class="headerlink" title="提升"></a><a href="#提升" title="提升"></a>提升</h3><h5 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a><a href="#变量提升" title="变量提升"></a>变量提升</h5><p>Javascript代码执行时并不是从上往下执行的：<br>示例一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=2;</span><br><span class="line"></span><br><span class="line">var a;</span><br><span class="line"></span><br><span class="line">alert(a);</span><br></pre></td></tr></table></figure><p>我们可能认为会输出undefined，事实并非如此。这是因为变量声明var a;被提升了。<br>示例二：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(a);  /\*undefined\*/</span><br><span class="line"></span><br><span class="line">var a=2;</span><br></pre></td></tr></table></figure><p>这是因为变量声明被提升，而赋值操作并不会被提升。</p><p>函数声明同样会被提升，但是函数表达式中的函数名标示符在赋值之前不会被加到作用域中。</p><h3 id="函数优先"><a href="#函数优先" class="headerlink" title="函数优先"></a><a href="#函数优先" title="函数优先"></a>函数优先</h3><p>一个普通块内部的函数声明通常会被提升到所在作用域的顶部。<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">foo(); /\*1\*/</span><br><span class="line"></span><br><span class="line">var foo;</span><br><span class="line"></span><br><span class="line">function foo()&#123;</span><br><span class="line"></span><br><span class="line">    console.log(1);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo=function()&#123;</span><br><span class="line"></span><br><span class="line">    console.log(2);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这是因为引擎会把这段代码理解为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function foo()&#123;</span><br><span class="line"></span><br><span class="line">    console.log(1);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo(); /\*1\*/</span><br><span class="line"></span><br><span class="line">foo=function()&#123;</span><br><span class="line"></span><br><span class="line">    console.log(2);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>变量提升与引擎的工作机制有关，引擎处理程序中的声明发生在编译阶段，数值处理发生在执行阶段，因此声明会被提升。</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a><a href="#闭包" title="闭包"></a>闭包</h3><p>当执行函数可以记住并访问所在的词法作用域时，就产生了闭包，即时函数是在当前词法作用域之外执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var fn;</span><br><span class="line"></span><br><span class="line">function foo()&#123;</span><br><span class="line"></span><br><span class="line">    var a=2;</span><br><span class="line"></span><br><span class="line">    function baz()&#123;</span><br><span class="line"></span><br><span class="line">        console.log(a);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fn=baz;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function bar()&#123;</span><br><span class="line"></span><br><span class="line">    fn();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br><span class="line"></span><br><span class="line">bar();</span><br></pre></td></tr></table></figure><p>无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用域的引用，无论在何处执行这个函数都将产生闭包。</p><h3 id="块作用域与闭包"><a href="#块作用域与闭包" class="headerlink" title="块作用域与闭包"></a><a href="#块作用域与闭包" title="块作用域与闭包"></a>块作用域与闭包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for(var i=1;i&lt;=5;i++)&#123;</span><br><span class="line"></span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line"></span><br><span class="line">    console.log(i)&#125;, i*1000);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码输出5次6；因为setTimeout函数公用全局作用域的i,解决办法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for(let i=1;i&lt;=5;i++)&#123;</span><br><span class="line"></span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line"></span><br><span class="line">    console.log(i)&#125;, i*1000);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>块作用域与闭包联手天下无敌，HH.</p><h3 id="使用IIFE来创建块作用域"><a href="#使用IIFE来创建块作用域" class="headerlink" title="使用IIFE来创建块作用域"></a><a href="#使用IIFE来创建块作用域" title="使用IIFE来创建块作用域"></a>使用IIFE来创建块作用域</h3><p>try/catch的性能很糟糕，使用期创建块作用域运行会很慢；使用try／catch异常最大的开销是创建异常时需要回溯栈信息，如果没有异常的时候几乎不会影响性能。<br>但是将一段代码中的任意部分拿出来进行函数包装会改变吧这段代码的含义，其中的this、return、break和continue都会发生变化。IIFE并不是一个普遍适合的解决方案，它只适合在某些情况下进行手动操作。</p><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a><a href="#模块" title="模块"></a>模块</h3><p>模块模式应该具备的条件：<br>1.必须有外部的封闭函数，该函数至少被调用一次。<br>2.封闭函数至少返回一个内部函数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript-Scope&quot;&gt;&lt;a href=&quot;#JavaScript-Scope&quot; class=&quot;headerlink&quot; title=&quot;JavaScript Scope&quot;&gt;&lt;/a&gt;JavaScript Scope&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS reset</title>
    <link href="http://yoursite.com/2018/02/01/CSS-reset/"/>
    <id>http://yoursite.com/2018/02/01/CSS-reset/</id>
    <published>2018-01-31T16:01:00.000Z</published>
    <updated>2018-03-02T07:08:16.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS-reset"><a href="#CSS-reset" class="headerlink" title="CSS reset"></a>CSS reset</h1><ol><li><a href="#什么是CSS－reset">什么是CSS－reset</a></li><li><a href="#为什么要进行CSS-reset">为什么要进行CSS-reset</a></li><li><a href="#html标签默认样式">html标签默认样式</a></li><li><a href="#浏览器默认样式">浏览器默认样式</a></li><li><a href="#一份CSS－reset代码">一份CSS－reset代码</a></li><li><a href="#到底要不要用CSS－reset">到底要不要用CSS－reset</a></li><li><a href="#总结">总结</a></li></ol><h3 id="什么是CSS－reset"><a href="#什么是CSS－reset" class="headerlink" title="什么是CSS－reset"></a><a href="#什么是CSS－reset" title="什么是CSS－reset"></a>什么是CSS－reset</h3><p>CSS-reset是指在开发一开始就将浏览器的默认样式全部去掉，更准确说就是通过重新定义标签样式。“覆盖”浏览器的CSS默认属性。最最简单的说法就是把浏览器提供的默认样式覆盖掉！这就是CSS reset。</p><h3 id="为什么要进行CSS-reset"><a href="#为什么要进行CSS-reset" class="headerlink" title="为什么要进行CSS-reset"></a><a href="#为什么要进行CSS-reset" title="为什么要进行CSS-reset"></a>为什么要进行CSS-reset</h3><p>在HTML标签在浏览器里有默认的样式，例如 p 标签有上下边距，strong标签有字体加粗样式，em标签有字体倾斜样式。不同浏览器的默认样式之间也会有差别，例如ul默认带有缩进的样式，在IE下，它的缩进是通过margin实现的，而Firefox下，它的缩进是由padding实现的。在切换页面的时候，浏览器的默认样式往往会给我们带来麻烦，影响开发效率。同时，因为浏览器的品种很多，每个浏览器的默认样式也是不同的，比如标签，在IE浏览器、Firefox浏览器以及Safari浏览器中的样式都是不同的，所以，通过重置button标签的CSS属性，然后再将它统一定义，就可以产生相同的显示效果。</p><h3 id="html标签默认样式"><a href="#html标签默认样式" class="headerlink" title="html标签默认样式"></a><a href="#html标签默认样式" title="html标签默认样式"></a>html标签默认样式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">li &#123; display: list-item &#125;/*默认以列表显示*/</span><br><span class="line"></span><br><span class="line">head &#123; display: none &#125;/*默认不显示*/</span><br><span class="line"></span><br><span class="line">table &#123; display: table &#125;/*默认为表格显示*/</span><br><span class="line"></span><br><span class="line">tr &#123; display: table-row &#125;/*默认为表格行显示*/</span><br><span class="line"></span><br><span class="line">thead &#123; display: table-header-group &#125;/*默认为表格头部分组显示*/</span><br><span class="line"></span><br><span class="line">tbody &#123; display: table-row-group &#125;/*默认为表格行分组显示*/</span><br><span class="line"></span><br><span class="line">tfoot &#123; display: table-footer-group &#125;/*默认为表格底部分组显示*/</span><br><span class="line"></span><br><span class="line">col &#123; display: table-column &#125;/*默认为表格列显示*/</span><br><span class="line"></span><br><span class="line">colgroup &#123; display: table-column-group &#125;/*默认为表格列分组显示*/</span><br><span class="line"></span><br><span class="line">td, th &#123; display: table-cell; &#125;/*默认为单元格显示*/</span><br><span class="line"></span><br><span class="line">caption &#123; display: table-caption &#125;/*默认为表格标题显示*/</span><br><span class="line"></span><br><span class="line">th &#123; font-weight: bolder; text-align: center &#125;/*默认为表格标题显示，呈现加粗居中状态*/</span><br><span class="line"></span><br><span class="line">caption &#123; text-align: center &#125;/*默认为表格标题显示，呈现居中状态*/</span><br><span class="line"></span><br><span class="line">body &#123; margin: 8px; line-height: 1.12 &#125;</span><br><span class="line"></span><br><span class="line">h1 &#123; font-size: 2em; margin: .67em 0 &#125;</span><br><span class="line"></span><br><span class="line">h2 &#123; font-size: 1.5em; margin: .75em 0 &#125;</span><br><span class="line"></span><br><span class="line">h3 &#123; font-size: 1.17em; margin: .83em 0 &#125;</span><br><span class="line"></span><br><span class="line">h4, p, blockquote, ul, fieldset, form, ol, dl, dir, menu &#123; margin: 1.12em 0 &#125;</span><br><span class="line"></span><br><span class="line">h5 &#123; font-size: .83em; margin: 1.5em 0 &#125;</span><br><span class="line"></span><br><span class="line">h6 &#123; font-size: .75em; margin: 1.67em 0 &#125;</span><br><span class="line"></span><br><span class="line">h1, h2, h3, h4, h5, h6, b,strong &#123; font-weight: bolder &#125;</span><br><span class="line"></span><br><span class="line">blockquote &#123; margin-left: 40px; margin-right: 40px &#125;</span><br><span class="line"></span><br><span class="line">i, cite, em,var, address &#123; font-style: italic &#125;</span><br><span class="line"></span><br><span class="line">pre, tt, code, kbd, samp &#123; font-family: monospace &#125;</span><br><span class="line"></span><br><span class="line">pre &#123; white-space: pre &#125;</span><br><span class="line"></span><br><span class="line">button, textarea, input, object, select &#123; display:inline-block; &#125;</span><br><span class="line"></span><br><span class="line">big &#123; font-size: 1.17em &#125;</span><br><span class="line"></span><br><span class="line">small, sub, sup &#123; font-size: .83em &#125;</span><br><span class="line"></span><br><span class="line">sub &#123; vertical-align: sub &#125;/*定义sub元素默认为下标显示*/</span><br><span class="line"></span><br><span class="line">sup &#123; vertical-align: super &#125;/*定义sub元素默认为上标显示*/</span><br><span class="line"></span><br><span class="line">table &#123; border-spacing: 2px; &#125;</span><br><span class="line"></span><br><span class="line">thead, tbody, tfoot &#123; vertical-align: middle &#125;/*定义表头、主体表、表脚元素默认为垂直对齐*/</span><br><span class="line"></span><br><span class="line">td, th &#123; vertical-align: inherit &#125;/*定义单元格、列标题默认为垂直对齐默认为继承*/</span><br><span class="line"></span><br><span class="line">s, strike, del &#123; text-decoration: line-through &#125;/*定义这些元素默认为删除线显示*/</span><br><span class="line"></span><br><span class="line">hr &#123; border: 1px inset &#125;/*定义分割线默认为1px宽的3D凹边效果*/</span><br><span class="line"></span><br><span class="line">ol, ul, dir, menu, dd &#123; margin-left: 40px &#125;</span><br><span class="line"></span><br><span class="line">ol &#123; list-style-type: decimal &#125;</span><br><span class="line"></span><br><span class="line">ol ul, ul ol, ul ul, ol ol &#123; margin-top: 0; margin-bottom: 0 &#125;</span><br><span class="line"></span><br><span class="line">u, ins &#123; text-decoration: underline &#125;</span><br><span class="line"></span><br><span class="line">br:before &#123; content: &quot;&quot;A&quot; &#125;/*定义换行元素的伪对象内容样式*/</span><br><span class="line"></span><br><span class="line">:before, :after &#123; white-space: pre-line &#125;/*定义伪对象空格字符的默认样式*/</span><br><span class="line"></span><br><span class="line">center &#123; text-align: center &#125;</span><br><span class="line"></span><br><span class="line">abbr, acronym &#123; font-variant: small-caps; letter-spacing: 0.1em &#125;</span><br><span class="line"></span><br><span class="line">:link, :visited &#123; text-decoration: underline &#125;</span><br><span class="line"></span><br><span class="line">:focus &#123; outline: thin dotted invert &#125;</span><br><span class="line"></span><br><span class="line">\* Begin bidirectionality settings (do not change) */</span><br><span class="line"></span><br><span class="line">BDO[DIR=&quot;ltr&quot;] &#123; direction: ltr; unicode-bidi: bidi-override &#125;/*定义BDO元素当其属性为DIR=&quot;ltr&quot;时的默认文本读写显示顺序*/</span><br><span class="line"></span><br><span class="line">BDO[DIR=&quot;rtl&quot;] &#123; direction: rtl; unicode-bidi: bidi-override &#125;/*定义BDO元素当其属性为DIR=&quot;rtl&quot;时的默认文本读写显示顺序*/</span><br><span class="line"></span><br><span class="line">*[DIR=&quot;ltr&quot;] &#123; direction: ltr; unicode-bidi: embed &#125;/*定义任何元素当其属性为DIR=&quot;ltr&quot;时的默认文本读写显示顺序*/</span><br><span class="line"></span><br><span class="line">*[DIR=&quot;rtl&quot;] &#123; direction: rtl; unicode-bidi: embed &#125;/*定义任何元素当其属性为DIR=&quot;rtl&quot;时的默认文本读写显示顺序*/</span><br><span class="line"></span><br><span class="line">@media print &#123; /*定义标题和列表默认的打印样式*/</span><br><span class="line"></span><br><span class="line">h1 &#123; page-break-before: always &#125;</span><br><span class="line"></span><br><span class="line">h1, h2, h3, h4, h5, h6 &#123; page-break-after: avoid &#125;</span><br><span class="line"></span><br><span class="line">ul, ol, dl &#123; page-break-before: avoid &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浏览器默认样式"><a href="#浏览器默认样式" class="headerlink" title="浏览器默认样式"></a><a href="#浏览器默认样式" title="浏览器默认样式"></a>浏览器默认样式</h3><p>1.页边距<br>IE默认为10px，通过body的margin属性设置<br>FF默认为8px，通过body的padding属性设置<br>要清除页边距一定要清除这两个属性值</p><p>代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line"></span><br><span class="line">    margin:0;</span><br><span class="line"></span><br><span class="line">    padding:0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.段间距<br>IE默认为19px，通过p的margin-top属性设置<br>FF默认为1.12em，通过p的margin-bottom属性设<br>p默认为块状显示，要清除段间距，一般可以设置</p><p>代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line"></span><br><span class="line">    margin-top:0;</span><br><span class="line"></span><br><span class="line">    margin-bottom:0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.标题样式<br>h1~h6默认加粗显示：font-weight:bold;。<br>默认大小请参上表<br>还有是这样的写的</p><p>代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">h1 &#123;font-size:xx-large;&#125;</span><br><span class="line"></span><br><span class="line">h2 &#123;font-size:x-large;&#125;</span><br><span class="line"></span><br><span class="line">h3 &#123;font-size:large;&#125;</span><br><span class="line"></span><br><span class="line">h4 &#123;font-size:medium;&#125;</span><br><span class="line"></span><br><span class="line">h5 &#123;font-size:small;&#125;</span><br><span class="line"></span><br><span class="line">h6 &#123;font-size:x-small;&#125;</span><br></pre></td></tr></table></figure><p>各大浏览器默认字体大小为16px，即等于medium，h1~h6元素默认以块状显示字体显示为粗体，<br>要清除标题样式，一般可以设置</p><p>代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hx &#123;</span><br><span class="line"></span><br><span class="line">    font-weight:normal;</span><br><span class="line"></span><br><span class="line">    font-size:value;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.列表样式<br>IE默认为40px，通过ul、ol的margin属性设置<br>FF默认为40px，通过ul、ol的padding属性设置<br>dl无缩进，但起内部的说明元素dd默认缩进40px，而名称元素dt没有缩进。<br>要清除列表样式，一般可以设置</p><p>代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ul, ol, dd &#123;</span><br><span class="line"></span><br><span class="line">    list-style-type:none;/*清楚列表样式符*/</span><br><span class="line"></span><br><span class="line">    margin-left:0;/*清楚IE左缩进*/</span><br><span class="line"></span><br><span class="line">    padding-left:0;/*清楚非IE左缩进*/</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.元素居中<br>IE默认为<code>text-align:center;</code><br>FF默认为<code>margin-left:auto;margin-right:auto;</code></p><p>6.超链接样式<br>a 样式默认带有下划线，显示颜色为蓝色，被访问过的超链接变紫色，要清除链接样式，一般可以设置</p><p>代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a &#123;</span><br><span class="line"></span><br><span class="line">    text-decoration:none;</span><br><span class="line"></span><br><span class="line">    color:#colorname;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7 鼠标样式<br>IE默认为<code>cursor:hand;</code>.<br>FF默认为<code>cursor:pointer;</code>.该声明在IE中也有效</p><p>8 图片链接样式<br>IE默认为紫色2px的边框线<br>FF默认为蓝色2px的边框线<br>要清除图片链接样式，一般可以设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">img &#123;</span><br><span class="line"></span><br><span class="line">    border:0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一份CSS－reset代码"><a href="#一份CSS－reset代码" class="headerlink" title="一份CSS－reset代码"></a><a href="#一份CSS－reset代码" title="一份CSS－reset代码"></a>一份CSS－reset代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line">html5doctor.com Reset Stylesheet</span><br><span class="line"></span><br><span class="line">v1.4.1</span><br><span class="line"></span><br><span class="line">2010-03-01</span><br><span class="line"></span><br><span class="line">Author: Richard Clark - http://richclarkdesign.com</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">html, body, div, span, object, iframe,</span><br><span class="line"></span><br><span class="line">h1, h2, h3, h4, h5, h6, p, blockquote, pre,</span><br><span class="line"></span><br><span class="line">abbr, address, cite, code,</span><br><span class="line"></span><br><span class="line">del, dfn, em, img, ins, kbd, q, samp,</span><br><span class="line"></span><br><span class="line">small, strong, sub, sup, var,</span><br><span class="line"></span><br><span class="line">b, i,</span><br><span class="line"></span><br><span class="line">dl, dt, dd, ol, ul, li,</span><br><span class="line"></span><br><span class="line">fieldset, form, label, legend,</span><br><span class="line"></span><br><span class="line">table, caption, tbody, tfoot, thead, tr, th, td,</span><br><span class="line"></span><br><span class="line">article, aside, canvas, details, figcaption, figure,</span><br><span class="line"></span><br><span class="line">footer, header, hgroup, menu, nav, section, summary,</span><br><span class="line"></span><br><span class="line">time, mark, audio, video &#123;</span><br><span class="line"></span><br><span class="line">    margin:0;</span><br><span class="line"></span><br><span class="line">    padding:0;</span><br><span class="line"></span><br><span class="line">    border:0;</span><br><span class="line"></span><br><span class="line">    outline:0;</span><br><span class="line"></span><br><span class="line">    font-size:100%;</span><br><span class="line"></span><br><span class="line">    vertical-align:baseline;</span><br><span class="line"></span><br><span class="line">    background:transparent;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line"></span><br><span class="line">    line-height:1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:focus &#123;</span><br><span class="line"></span><br><span class="line">    outline: 1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">article,aside,canvas,details,figcaption,figure,</span><br><span class="line"></span><br><span class="line">footer,header,hgroup,menu,nav,section,summary &#123;</span><br><span class="line"></span><br><span class="line">    display:block;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nav ul &#123;</span><br><span class="line"></span><br><span class="line">    list-style:none;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">blockquote, q &#123;</span><br><span class="line"></span><br><span class="line">    quotes:none;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">blockquote:before, blockquote:after,</span><br><span class="line"></span><br><span class="line">q:before, q:after &#123;</span><br><span class="line"></span><br><span class="line">    content:&apos;&apos;;</span><br><span class="line"></span><br><span class="line">    content:none;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a &#123;</span><br><span class="line"></span><br><span class="line">    margin:0;</span><br><span class="line"></span><br><span class="line">    padding:0;</span><br><span class="line"></span><br><span class="line">    border:0;</span><br><span class="line"></span><br><span class="line">    font-size:100%;</span><br><span class="line"></span><br><span class="line">    vertical-align:baseline;</span><br><span class="line"></span><br><span class="line">    background:transparent;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ins &#123;</span><br><span class="line"></span><br><span class="line">    background-color:#ff9;</span><br><span class="line"></span><br><span class="line">    color:#000;</span><br><span class="line"></span><br><span class="line">    text-decoration:none;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mark &#123;</span><br><span class="line"></span><br><span class="line">    background-color:#ff9;</span><br><span class="line"></span><br><span class="line">    color:#000;</span><br><span class="line"></span><br><span class="line">    font-style:italic;</span><br><span class="line"></span><br><span class="line">    font-weight:bold;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">del &#123;</span><br><span class="line"></span><br><span class="line">    text-decoration: line-through;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abbr[title], dfn[title] &#123;</span><br><span class="line"></span><br><span class="line">    border-bottom:1px dotted #000;</span><br><span class="line"></span><br><span class="line">    cursor:help;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">table &#123;</span><br><span class="line"></span><br><span class="line">    border-collapse:collapse;</span><br><span class="line"></span><br><span class="line">    border-spacing:0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hr &#123;</span><br><span class="line"></span><br><span class="line">    display:block;</span><br><span class="line"></span><br><span class="line">    height:1px;</span><br><span class="line"></span><br><span class="line">    border:0;</span><br><span class="line"></span><br><span class="line">    border-top:1px solid #cccccc;</span><br><span class="line"></span><br><span class="line">    margin:1em 0;</span><br><span class="line"></span><br><span class="line">    padding:0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">input, select &#123;</span><br><span class="line"></span><br><span class="line">    vertical-align:middle;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="到底要不要用CSS－reset"><a href="#到底要不要用CSS－reset" class="headerlink" title="到底要不要用CSS－reset"></a><a href="#到底要不要用CSS－reset" title="到底要不要用CSS－reset"></a>到底要不要用CSS－reset</h3><p>那些所谓的需要重置的标签<br>我现在问您一个问题，在您制作的或参与开发的页面中，h1~h6标签您使用了几个，我想不可能全部都使用吧，使用三种类型的标题标签就不多了。您有必要对h1~h6所有标签都使用margin的清除吗？ OK，我们现在换个角度思考，假如我们没有对h1~h6标签设置{margin:0;}的重置怎么办？从SEO的角度讲，一个页面最多只能出现一个h1标签，所以，显然，h1标签的CSS reset完全没有必要，页面什么地方用就设置相应的样式，只要你记住，h1标签是有个默认的margin-top与margin-bottom值的，所以，我们就可以由这样的属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h1&#123;margin:10px 0 0;&#125;</span><br></pre></td></tr></table></figure><p>对比下CSS reset下的使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h1, h2, h3, h4, h5, h6&#123;margin:0;&#125;</span><br><span class="line"></span><br><span class="line">h1&#123;margin-top:10px;&#125;</span><br></pre></td></tr></table></figure><p>使用CSS reset不仅文件大小增加了，CSS代码属性也发生了重置，CSS渲染也增加了。显然不及没有CSS reset来的高效。我们将这些标签重置，在后面的css中很大程度上又要重新设置它，这反而增加了浏览器的渲染，与其这样，还不如在使用它的地方直接将它设定到合适的值，这样不仅达到了效果，反而减少了渲染。回过来，就算有一些差异，为何非得在头部CSS reset的位置统一呢？当需要的时候，再设置，反而更合理，更高效！</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h3><p>对于CSS－reset,我也觉得没有太大的使用必要，在开发过程中，开发者只要熟悉各个标签的默认样式，对于需要重新设置的属性在合适的地方显式的设置。在学习过程中渐渐熟悉在不同浏览器中表现有所不同的标签，并且合理的设置属性值就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSS-reset&quot;&gt;&lt;a href=&quot;#CSS-reset&quot; class=&quot;headerlink&quot; title=&quot;CSS reset&quot;&gt;&lt;/a&gt;CSS reset&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#什么是CSS－reset&quot;&gt;什么是CSS－reset
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>line－height的作用对象</title>
    <link href="http://yoursite.com/2018/01/31/line%EF%BC%8Dheight%E7%9A%84%E4%BD%9C%E7%94%A8%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2018/01/31/line－height的作用对象/</id>
    <published>2018-01-31T15:59:24.000Z</published>
    <updated>2018-01-31T16:00:03.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="line－height的作用对象"><a href="#line－height的作用对象" class="headerlink" title="line－height的作用对象"></a>line－height的作用对象</h1><ol><li><a href="#line-height作用于行内元素或者原生的行内块级元素">line-height作用于行内元素或者原生的行内块级元素</a></li><li><a href="#步入主题：">步入主题：</a></li></ol><h3 id="line-height作用于行内元素或者原生的行内块级元素"><a href="#line-height作用于行内元素或者原生的行内块级元素" class="headerlink" title="line-height作用于行内元素或者原生的行内块级元素"></a><a href="#line-height作用于行内元素或者原生的行内块级元素" title="line-height作用于行内元素或者原生的行内块级元素"></a>line-height作用于行内元素或者原生的行内块级元素</h3><hr><p>这个文章设及到继承和line-height的相关知识:<br>阅读中遇到问题可以回来参考：<a href="http://www.cnphp.info/css-style-inheritance.html" target="_blank" rel="noopener">css继承</a>和<a href="http://www.w3school.com.cn/cssref/pr_dim_line-height.asp" target="_blank" rel="noopener">line-height之w3c</a></p><h3 id="步入主题："><a href="#步入主题：" class="headerlink" title="步入主题："></a><a href="#步入主题：" title="步入主题："></a>步入主题：</h3><hr><p>先来看个例子：</p><p>为什么box这个div包住了cont而没有包住input呢？首先我们要明确line-height只对行内元素或者原生的行内块级元素有效。当我们尝试把cont的显示方式改为inline-block发现显示cont并没有改变位置，说明它对非原生行内块级元素无效。box中的cont是块级元素会正常显示，但是由于cont继承了box的行高属性值，所以元素会把300像素作为自己的行高，从cont的左上角开始计算自己的显示位置，就会出现文章开始出现的情况。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;line－height的作用对象&quot;&gt;&lt;a href=&quot;#line－height的作用对象&quot; class=&quot;headerlink&quot; title=&quot;line－height的作用对象&quot;&gt;&lt;/a&gt;line－height的作用对象&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>The poem and song</title>
    <link href="http://yoursite.com/2018/01/31/The-poem-and-song/"/>
    <id>http://yoursite.com/2018/01/31/The-poem-and-song/</id>
    <published>2018-01-31T15:57:34.000Z</published>
    <updated>2018-01-31T15:57:46.774Z</updated>
    
    <content type="html"><![CDATA[<ol><li><a href="#今天听了一首歌">今天听了一首歌</a></li><li><a href="#博客又出问题了">博客又出问题了</a></li><li><a href="#看书学习">看书学习</a></li><li><a href="#不错的博文">不错的博文</a></li></ol><h3 id="今天听了一首歌"><a href="#今天听了一首歌" class="headerlink" title="今天听了一首歌"></a><a href="#今天听了一首歌" title="今天听了一首歌"></a>今天听了一首歌</h3><hr><p>今天听了一首歌：诗与岁月同歌<br>有回忆过去的怀旧感，然而感性大于理性是不好的👎。<br>那时我们有梦，关于文学，关于爱情，关于穿越世界的旅行。如今我们深夜饮酒，杯子碰到一起，都是梦破碎的声音。 —北岛《波兰来客》</p><blockquote><p>推一扇被晨昏折旧的木漆门，<br>点一盏被时光淹没的夜星灯，<br>照一纸冬夜梦醒的来路与归程。<br>谁会记得你，爱恨都如此认真。<br>听杯酒碰撞后的可是梦碎声？<br>看荒原盛开过的可是心中城？<br>路过的青川孤岛都曾唤作天真。<br>谁还记得你，眉宇之间擦过多少人。<br>诗与岁月同歌，<br>爱情随风吟哦。<br>一瓣落红没入长河，<br>倒映你眼眸如昔明澈。<br>诗与岁月同歌，<br>天涯只身跋涉。<br>一如远山长青巍峨，<br>那个你却再无人记得。<br>折朵玫瑰写封信寄给旧时分，<br>衔枝翠羽裁寸光送给梦里人。<br>才看清那无畏赤诚已刻作掌纹。<br>也终于明白，原来这残酷便是人生。<br>诗与岁月同歌，<br>天涯只身跋涉。<br>一如远山长青巍峨，<br>那个你如果有人识得。<br>诗与岁月同歌，<br>都是浪子归客。<br>一样平凡一样独特，<br>光彩耀目或隐忍沉默。<br>万千人里，你，是哪个？<br>万千人里，你，是那个？</p></blockquote><h3 id="博客又出问题了"><a href="#博客又出问题了" class="headerlink" title="博客又出问题了"></a><a href="#博客又出问题了" title="博客又出问题了"></a>博客又出问题了</h3><hr><blockquote><p>昨天晚上第一次写了一篇博客，确发现图片无法正常显示，后来把它放到theme的images里面解决了，应该还有其他的解决方法的，关键是路径，尝试了一下没有搞出来其它的方法。把它和主题的图片放在一起可能会带来维护问题。<br>然后今天上午值班的时候又发现（卧槽）点击题目链接直接返回404.由摸索了好久。上传原文件到Github啦，以后再也不怕再出什么问题。</p></blockquote><h3 id="看书学习"><a href="#看书学习" class="headerlink" title="看书学习"></a><a href="#看书学习" title="看书学习"></a>看书学习</h3><hr><blockquote><p>下午就是看书学习了（值班真特么浪费时间），看《javascript高级程序设计》第五章（这章好长啊）里面的函数章节，函数是对象，所以函数具有所有引用类型的方法和属性，明天要总结一下。<br>也看了一下慕课网对bootstrap框架的简单介绍，框架虽好，但是不是长久之计哈！</p></blockquote><h3 id="不错的博文"><a href="#不错的博文" class="headerlink" title="不错的博文"></a><a href="#不错的博文" title="不错的博文"></a>不错的博文</h3><hr><ul><li>下学期该多逃课：<a href="http://selfboot.cn/2015/11/25/skip-classes/#more" target="_blank" rel="noopener">让我们一起愉快地逃课吧</a></li><li>各种大学生创业比赛：<a href="https://www.v2ex.com/t/245821#reply49" target="_blank" rel="noopener">如今这各种大学生创业比赛啊</a>。。。人心开始越来越浮躁了 ~</li><li>刻意练习：<a href="https://www.v2ex.com/t/246749#reply3" target="_blank" rel="noopener">通过「刻意练习」，你才能成为顶尖的程序员</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#今天听了一首歌&quot;&gt;今天听了一首歌&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#博客又出问题了&quot;&gt;博客又出问题了&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#看书学习&quot;&gt;看书学习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#不错的博文&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
